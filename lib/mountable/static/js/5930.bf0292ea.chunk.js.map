{"version":3,"file":"static/js/5930.bf0292ea.chunk.js","mappings":"6RAgTA,EAvRkB,WAchB,WAAYA,IAAkB,oBAXtBC,YAAkD,IAAIC,IAAK,KAG3DC,UAA0C,GAAE,KAG5CC,YAAwB,GAAE,KAG1BJ,QAAU,EAGhBK,KAAKL,QAAUA,CACjB,CAoQC,OAlQD,8BAMA,SAAOM,GACL,IAAMC,EAAiB,IAAIL,IAC3BI,EAAQE,SAAQ,SAAAC,GACdF,EAAeG,IAAID,EAAOE,YAAaF,EACzC,IAEA,IAAMG,EAAe,CAInBC,aAAc,CAAC,EACfC,WAAY,GACZC,aAAc,IA2ChB,OArCAV,KAAKJ,YAAYO,SACf,SAACQ,EAA4BC,EAAkBC,GAC7CF,EAAIR,SAAQ,SAACW,EAAgBC,EAAkBF,GAC7C,IAAMT,EAASF,EAAec,IAAID,GAC9BX,IACFG,EAAaC,aAAa,GAAD,OAAII,EAAQ,YAAIG,IACvCX,EAAOa,aAAaH,GAE1B,GACF,IAMFd,KAAKF,UAAUK,SAAQ,SAACQ,GACtB,IAAMO,EAAgC,CAAC,EACvCP,EAAIR,SAAQ,SAACW,EAAgBC,EAAkBF,GAC7C,IAAMT,EAASF,EAAec,IAAID,GAClC,GAAIX,EAAQ,CACV,IAAMe,EAAYf,EAAOa,aAAaH,IAClCM,EAAAA,EAAAA,IAAmBD,KACrBD,EAASH,GAAYI,EAEzB,CACF,IACAZ,EAAaE,WAAWY,KAAKH,EAC/B,IAGAX,EAAaG,aAAeV,KAAKD,YAIpBuB,KAAKC,UAAUhB,GAAc,SAACiB,EAAGC,GAAC,YACvCC,IAAND,EAAkB,KAAOA,CAAC,GAG9B,GAEA,sBAMA,SAASE,EAA0B1B,GAA8B,IAAD,OACxD2B,EAAeN,KAAKO,MAAMF,GAE1BzB,EAAiB,IAAIL,IAC3BI,EAAQE,SAAQ,SAAAC,GACdF,EAAeG,IAAID,EAAOE,YAAaF,EACzC,IAKA0B,OAAOC,KAAKH,EAAapB,cAAcL,SAAQ,SAAA6B,GAC7C,MAA6BA,EAAIC,MAAM,KAAKC,IAAIC,QAAO,eAAhDvB,EAAQ,KAAEG,EAAQ,KACnBX,EAASF,EAAec,IAAID,GAClC,GAAIX,EAAQ,CACV,IACU,EADJU,EAAOV,EAAOgC,QAAQR,EAAapB,aAAawB,IACtD,GAAIlB,EACoC,GAAlC,EAAKlB,YAAYyC,IAAIzB,IACvB,EAAKhB,YAAYS,IAAIO,EAAU,IAAIf,KAEP,QAA9B,IAAKD,YAAYoB,IAAIJ,UAAS,OAA9B,EAAgCP,IAAIU,EAAUD,EAElD,CACF,IAKAc,EAAanB,WAAWN,SAAQ,SAACQ,GAC/B,IAAMO,EAAkC,IAAIrB,IAG5CI,EAAQE,SAAQ,SAAAC,GACdc,EAASb,IAAID,EAAOE,YAAaF,EAAOgC,aAAQV,GAClD,IAGAI,OAAOC,KAAKpB,GAAKR,SAAQ,SAAAY,GACvB,IAAMX,EAASF,EAAec,IAAImB,OAAOpB,IAEzC,GAAIX,EAAQ,CACV,IAAMU,EAAOV,EAAOgC,QAAQzB,EAAIwB,OAAOpB,KACnCD,GACFI,EAASb,IAAI8B,OAAOpB,GAAWD,EAEnC,CACF,IACA,EAAKhB,UAAUuB,KAAKH,EACtB,IAGAlB,KAAKD,YAAc6B,EAAalB,YAClC,GAEA,wBAGA,SAAWC,GACT,OAAOA,GAAOX,KAAKL,OACrB,GAEA,qBASA,SAAQ2C,EAAa3B,GACnB,GAAIX,KAAKuC,WAAW5B,GAElB,OAAOX,KAAKF,UAAUa,EAAMX,KAAKL,SAASqB,IAAIsB,GAGhD,IAAME,EAAWxC,KAAKJ,YAAYoB,IAAIL,GACtC,YAAiBe,IAAbc,EAIGA,EAASxB,IAAIsB,QAJpB,CAKF,GAEA,qBAOA,SAAQA,EAAa3B,EAAaG,GAChC,GAAId,KAAKuC,WAAW5B,GAAM,CACxB,GAAIA,EAAMX,KAAKL,SAAWK,KAAKF,UAAU2C,OAGvC,OAGFzC,KAAKF,UAAUa,EAAMX,KAAKL,SAASU,IAAIiC,EAAKxB,EAC9C,KAAO,MAC6BY,IAA9B1B,KAAKJ,YAAYoB,IAAIL,IACvBX,KAAKJ,YAAYS,IAAIM,EAAK,IAAId,KAGfG,KAAKJ,YAAYoB,IAAIL,GAC7BN,IAAIiC,EAAKxB,EACpB,CACF,GAEA,oBAKA,SAAO4B,GACL1C,KAAKF,UAAUuB,KAAKqB,EACtB,GAEA,wBAKA,SAAWC,GAAuB,IAAD,OAE/BA,EACGC,MAAK,SAACC,EAAGC,GAAC,OAAKA,EAAID,CAAC,IACpB1C,SAAQ,SAAAQ,GACP,EAAKoC,UAAUpC,EACjB,GACJ,GAEA,uBAKA,SAAUA,IACJqC,EAAAA,EAAAA,IAAkBrC,IAAQA,EAAM,IAKhCX,KAAKuC,WAAW5B,GAElBX,KAAKF,UAAUmD,OAAOtC,EAAMX,KAAKL,QAAS,IAKvCK,KAAKD,YAAYmD,SAASvC,KAE7BX,KAAKD,YAAYsB,KAAKV,GAEtBX,KAAKD,YAAcC,KAAKD,YAAY6C,MAAK,SAACC,EAAGC,GAAC,OAAKD,EAAIC,CAAC,KAI1D9C,KAAKJ,YAAYuD,OAAOxC,IAC1B,GAEA,iCASA,SAAoBA,GAGlB,IADA,IAAIyC,EAAgBzC,EACX0C,EAAI,EAAGA,EAAIrD,KAAKD,YAAY0C,UAC/BzC,KAAKD,YAAYsD,GAAKD,GADiBC,IAI3CD,GAAiB,EAEnB,OAAOA,CACT,GAEA,wBAGA,WACE,OAAOpD,KAAKL,QAAUK,KAAKF,UAAU2C,OAASzC,KAAKD,YAAY0C,MACjE,KAAC,EApRe,G,sBCiDlB,MA/CA,WAGE,IAAMa,GAAeC,EAAAA,EAAAA,KAErB,MAAO,CAELC,YAAaF,EAAMG,OAAOC,QAC1BC,SAAUL,EAAMG,OAAOG,MACvBC,aAAaC,EAAAA,EAAAA,IAAeR,EAAMG,OAAOC,QAAS,IAClDK,YAAaT,EAAMG,OAAOO,YAC1BC,sBAAuBX,EAAMG,OAAOO,YACpCE,WAAYZ,EAAMa,aAAaC,SAC/BC,gBAAgBP,EAAAA,EAAAA,IAAeR,EAAMG,OAAOC,QAAS,IAErDY,aAAchB,EAAMG,OAAOc,YAC3BC,aAAclB,EAAMG,OAAOG,MAC3Ba,SAAUnB,EAAMG,OAAOiB,MACvBC,iBAAkBrB,EAAMG,OAAOmB,YAC/BC,gBAAiBvB,EAAMG,OAAOiB,MAC9BI,WAAYxB,EAAMG,OAAOc,YACzBQ,mBAAoBzB,EAAMG,OAAOG,MACjCoB,gBAAiB1B,EAAMG,OAAOc,YAC9BU,gBAAgB,GAAD,OAAK3B,EAAM4B,UAAUC,IAEpCC,cAAe9B,EAAM4B,UAAUC,GAC/BE,eAAgB/B,EAAM4B,UAAUC,GAChCG,SAAUhC,EAAMG,OAAO8B,SACvBC,YAAY1B,EAAAA,EAAAA,IAAeR,EAAMG,OAAO8B,SAAU,IAClDE,UAAWnC,EAAMG,OAAOiC,YACxBC,WAAYrC,EAAMG,OAAOc,YACzBqB,OAAQtC,EAAMG,OAAOoC,QACrBC,aAAcxC,EAAMG,OAAOoC,QAC3BE,sBAAuB,EACvBC,oBAAqB,EAErBC,SAAU3C,EAAMG,OAAOmB,YACvBsB,iBAAkB5C,EAAMG,OAAOmB,YAC/BuB,UAAW7C,EAAMG,OAAO2C,SACxBC,gBAAiB/C,EAAMG,OAAO6C,gBAI9BC,kBAAmBjD,EAAMkD,MAAMC,GAEnC,E,qDCiBMC,EAAsB,CAAC,OAAQ,IAAK,MAAO,IAAK,KAAM,KACtDC,EAAuB,CAAC,QAAS,IAAK,KAAM,IAAK,MAAO,KAkBvD,SAASC,EAAaC,GAAiD,IAA/BC,EAAY,uDAAG,GAE5D,OADAD,EAAQ,uBAASA,GACV,CACLE,KAAMC,EAAAA,GAAAA,KACNC,UAAU,EACVC,cAAc,EACdC,KAAMN,GAAYC,EAAY,cAAUA,EAAY,MAAO,IAC3DM,YAAaP,EACbQ,SAAS,EAEb,CAOO,SAASC,EAAYxG,GAC1B,OAAOA,EAAKyG,eAAe,YAAezG,EAAmBuG,OAC/D,CAqDO,SAASG,EAAcpH,GAC5B,OAAO,gBACLqH,GAAIrH,EAAOqH,GACXC,MAAOtH,EAAOsH,MACdC,SAAS,EACTC,cAAexH,EAAOwH,eAClBxH,EAAOyH,aAAe,CACxBC,KAAM1H,EAAO2H,QAAU,EAAI,IAEzB3H,EAAO4H,OAAS,CAClBA,MAAO5H,EAAO4H,OAGpB,CAUO,SAASC,EACdC,EACAC,GAEA,OAAInF,EAAAA,EAAAA,IAAkBkF,GACbC,GAAc,CAAC,GAGpBnF,EAAAA,EAAAA,IAAkBmF,GACbD,GAAiB,CAAC,GAGpBE,EAAAA,EAAAA,OAAMF,EAAeC,EAC9B,CAUO,SAASE,EAAYlB,GAC1B,IAAInE,EAAAA,EAAAA,IAAkBmE,GACpB,MAAO,GAGT,GAAoB,kBAATA,GAAqC,mBAATA,EAErC,MAAO,CAACA,GAGV,GAAoB,kBAATA,EAAmB,CAC5B,GAAa,KAATA,EAEF,MAAO,GAIT,IAAIA,EAAKmB,OAAOC,WAAW,OAAQpB,EAAKmB,OAAOE,SAAS,KAStD,OAAOrB,EAAKlF,MAAM,KAPlB,IACE,OAAOX,KAAKO,MAAMsF,EAGpB,CAFE,MAAOsB,GACP,MAAO,CAACtB,EACV,CAKJ,CAEA,IACE,IAAMuB,EAAapH,KAAKO,MACtBP,KAAKC,UAAU4F,GAAM,SAACwB,EAAMC,GAAK,MACd,kBAAVA,EAAqBzG,OAAOyG,GAASA,CAAK,KAGrD,OAAKC,EAAAA,EAAAA,SAAQH,GAINA,EAAWxG,KAAI,SAAC0G,GAAU,MAC/B,CAAC,SAAU,SAAU,UAAW,QAAQ1F,gBAAgB0F,GACpDA,EACAE,EAAaF,EAAM,IANhB,CAACE,EAAaJ,GAUzB,CAFE,MAAOD,GACP,MAAO,CAACK,EAAa3B,GACvB,CACF,CAUO,SAAS2B,EAAa3B,GAC3B,IACE,IACE,OAAO4B,EAAAA,EAAAA,UAAS5B,EAKlB,CAJE,MAAOsB,GACP,OAAOnH,KAAKC,UAAU4F,GAAM,SAACwB,EAAMC,GAAK,MACrB,kBAAVA,EAAqBzG,OAAOyG,GAASA,CAAK,GAErD,CAKF,CAJE,MAAOH,GAGP,MAAM,IAAN,cAAkBtB,EAAI,IACxB,CACF,CAWO,SAAS6B,EAAcJ,GAC5B,IAAI5F,EAAAA,EAAAA,IAAkB4F,GACpB,OAAO,KAGT,GAAqB,mBAAVA,EACT,OAAOA,EAGT,IAAMK,EAAeH,EAAaF,GAAOM,cAAcZ,OACvD,MAAqB,KAAjBW,EACK,OACEvC,EAAoBxD,SAAS+F,KAE7BtC,EAAqBzD,SAAS+F,SAAlC,CAKT,CAWO,SAASE,EAAaP,GAG3B,IAAI5F,EAAAA,EAAAA,IAAkB4F,GACpB,OAAO,KAGT,IAAIC,EAAAA,EAAAA,SAAQD,GACV,OAAOQ,IAGT,GAAqB,kBAAVR,EAAoB,CAC7B,GAA4B,IAAxBA,EAAMN,OAAO7F,OAEf,OAAO,KAGT,IAGE,IAAM4G,EAAmBC,IAAAA,SAAgBV,EAAMN,QAC/C,IAAIlH,EAAAA,EAAAA,IAAmBiI,GACrB,OAAOA,CAGT,CADA,MAAOZ,GACP,CAEJ,MAAO,GAAIG,aAAiBW,WAG1B,OAAOpH,OAAOyG,EAAM,IAGtB,OAAOzG,OAAOyG,EAChB,CAWO,SAASY,EACdZ,GAGS,IAFTa,EAAY,uDAAG,EACfC,EAAiB,wDAEjB,OAAKvH,OAAOwH,MAAMf,IAAUzG,OAAOyH,SAAShB,IACrB,IAAjBa,IAEFb,EAAQiB,KAAKC,MAAMlB,IAEdU,IAAOV,GAAOmB,OACnBL,EAAiB,cACN,IAAIM,OAAOP,IAAa,eACvB,IAAIO,OAAOP,GAAa,OAGjC,EACT,CCjXA,SAASQ,EAAaC,GACpB,IAAMC,EAAe,CACnBpD,KAAMC,EAAAA,GAAAA,KACNG,KAAM,GACNC,YAAa,GACbF,cAAc,EACdkD,iBAAkBF,EAAME,iBACxBnD,UAAU,EACVoD,MAAOH,EAAMnC,QAAU,QAAU,UAEnC,OAAO,kBACFmC,GAAK,IACRnD,KAAM,SACNuD,SAAU,UACVC,YAAY,EACZnI,QAAO,SAAC+E,GACN,IACE,IAAMqD,GAAWpJ,EAAAA,EAAAA,IAAmB+F,GAAQ2B,EAAa3B,GAAQ,KAC3DC,GAAchG,EAAAA,EAAAA,IAAmBoJ,GAAYA,EAAW,GAC9D,OAAO,kBACFL,GAAY,IACfhD,KAAMqD,EACNpD,YAAAA,EACAqD,gBAAgBzH,EAAAA,EAAAA,IAAkBmE,IAOtC,CALE,MAAOsB,GACP,OAAO7B,EACLkC,EAAa3B,GAAM,uDAAD,OACqCsB,GAE3D,CACF,EACAxH,aAAY,SAACH,GACX,YAAqBY,IAAdZ,EAAKqG,KAAqB,KAAOrG,EAAKqG,IAC/C,GAEJ,CAEA8C,EAAaS,gBAAiB,EAE9B,QCzCA,SAASC,EAAWT,GAClB,IAAMC,EAAe,CACnBpD,KAAMC,EAAAA,GAAAA,KACNG,KAAM,GACNC,YAAa,GACbF,cAAc,EACdkD,iBAAkBF,EAAME,iBACxBnD,UAAWiD,EAAMK,WACjBF,MAAOH,EAAMnC,QAAU,QAAU,UAGnC,OAAO,kBACFmC,GAAK,IACRnD,KAAM,OACNuD,SAAU,UACVlI,QAAO,SAAC+E,GACN,IACE,IAAMqD,GAAWpJ,EAAAA,EAAAA,IAAmB+F,GAAQ2B,EAAa3B,GAAQ,KAC3DC,GAAchG,EAAAA,EAAAA,IAAmBoJ,GAAYA,EAAW,GAC9D,OAAO,kBACFL,GAAY,IACfM,gBAAgBzH,EAAAA,EAAAA,IAAkBwH,GAClCrD,KAAMqD,EACNpD,YAAAA,GAQJ,CANE,MAAOqB,GAEP,OAAO7B,EACL,qBAAqB,qDAAD,OACiC6B,GAEzD,CACF,EACAxH,aAAY,SAACH,GACX,YAAqBY,IAAdZ,EAAKqG,KAAqB,KAAOrG,EAAKqG,IAC/C,GAEJ,CAEAwD,EAAWD,gBAAiB,EAE5B,QCrCA,SAASE,EAAcV,GACrB,IAAMC,EAAe,CACnBpD,KAAMC,EAAAA,GAAAA,QACNG,MAAM,EACND,cAAc,EACd2D,aAAcX,EAAME,iBACpBnD,UAAWiD,EAAMK,WACjBF,MAAOH,EAAMnC,QAAU,QAAU,UAGnC,OAAO,kBACFmC,GAAK,IACRnD,KAAM,UACNuD,SAAU,UACVlI,QAAO,SAAC+E,GACN,IAAIqD,EAGJ,YAAiB9I,KADjB8I,EAAWxB,EAAc7B,IAEhBP,EACLkC,EAAa3B,GAAM,gDAOhB,kBACFgD,GAAY,IACfhD,KAAMqD,GAEV,EACAvJ,aAAY,SAACH,GACX,YAAqBY,IAAdZ,EAAKqG,KAAqB,KAAOrG,EAAKqG,IAC/C,GAEJ,CAEAyD,EAAcF,gBAAiB,EAE/B,Q,WC9BA,SAASI,EAAkBZ,GAEzB,IAAIa,EAA4C,SAE1CC,EAAa/C,EAEjB,CACEgD,QAC0C,SAAxCC,EAAAA,GAAAA,YAAmBhB,EAAMiB,WAAwB,EAAC,GAAM,GAAS,IAGrEjB,EAAMkB,oBAGFC,EAAc,IAAIC,IAAIN,EAAWC,QAAQ/I,KAAI,SAAAqJ,GAAC,cAAWA,CAAC,KACvC,IAArBF,EAAYG,OACVH,EAAYhJ,IAAI,WAAagJ,EAAYhJ,IAAI,UAC/C0I,EAAW,SACFM,EAAYhJ,IAAI,aACzB0I,EAAW,YAIf,IAAMZ,EAAe,CACnBpD,KAAMC,EAAAA,GAAAA,OACNE,aAAcgD,EAAMK,WACpBkB,SAAU,GACVZ,aAAcX,EAAME,iBACpBnD,UAAWiD,EAAMK,WACjBpD,KAAM,CACJJ,KAAM,gBACN2E,cAAc,CACZ,IAAE,eACCV,EAAWC,QACXU,QAAO,SAAAC,GAAG,MAAY,KAARA,CAAU,IACxB1J,KAAI,SAAA0J,GAAG,OAAI9C,EAAa8C,EAAI,MAEjChD,MAAO,GACP3B,UAAWiD,EAAMK,aAIrB,OAAO,kBACFL,GAAK,IACRnD,KAAM,cACNuD,SAAU,UACVlI,QAAO,SAAC+E,GAEN,IAAIqD,EAAW,GAKf,OAJIpJ,EAAAA,EAAAA,IAAmB+F,KACrBqD,EAAW1B,EAAa3B,IAGrBgD,EAAahD,KAAKuE,cAAcxI,SAASsH,IAMvC,kBACFL,GAAY,IACfM,eAA6B,KAAbD,EAChBiB,SAAUjB,EACVrD,MAAK,kBACAgD,EAAahD,MAAI,IACpByB,MAAO4B,MAXF5D,EACLkC,EAAa0B,GAAU,gDAa7B,EACAvJ,aAAY,SAACH,GAA2D,IAAD,MAI1C,IAEQ,IALnC,YAAyBY,KAAZ,QAAT,EAAAZ,EAAKqG,YAAI,aAAT,EAAWyB,QAA4C,MAAZ,QAAT,EAAA9H,EAAKqG,YAAI,aAAT,EAAWyB,OACxC,KAEQ,WAAbmC,EACmC,QAArC,EAAO5B,EAAsB,QAAV,EAACrI,EAAKqG,YAAI,aAAT,EAAWyB,cAAM,QAAI,KACnB,YAAbmC,EAC6B,QAAtC,EAAO/B,EAAuB,QAAV,EAAClI,EAAKqG,YAAI,aAAT,EAAWyB,cAAM,QAAI,KAE5B,QAAhB,EAAO9H,EAAKqG,YAAI,aAAT,EAAWyB,KACpB,GAEJ,CAEAkC,EAAkBJ,gBAAiB,EAEnC,QCpGA,SAASmB,EAAW3B,GAClB,IAAMC,EAAe,CACnBpD,KAAMC,EAAAA,GAAAA,OACNG,KAAM,GACND,cAAc,EACd2D,aAAcX,EAAME,iBACpBC,MAAOH,EAAMnC,QAAU,QAAU,UAGnC,OAAO,kBACFmC,GAAK,IACRnD,KAAM,OACNuD,SAAU,UACVC,YAAY,EACZnI,QAAO,SAAC+E,GAEN,OAAO,kBACFgD,GAAY,IACfhD,KAAMkB,EAAYlB,GAClBsD,gBAAgBzH,EAAAA,EAAAA,IAAkBmE,IAEtC,EACAlG,aAAY,SAACH,GACX,YAAqBY,IAAdZ,EAAKqG,KAAqB,KAAOrG,EAAKqG,IAC/C,GAEJ,CAEA0E,EAAWnB,gBAAiB,EAE5B,QCdA,SAASoB,EAAa5B,GACpB,IAAM6B,EAAgBb,EAAAA,GAAAA,YAAmBhB,EAAMiB,WAEzCH,EAAa/C,EAEjB,CACE+D,UACED,EAAcxD,WAAW,QACP,UAAlBwD,GACAA,EAAcxD,WAAW,QACrB,OACA7G,EAENuK,IAAKF,EAAcxD,WAAW,QAAU,OAAI7G,GAG9CwI,EAAMkB,oBAGFc,GAAgBlJ,EAAAA,EAAAA,IAAkBgI,EAAWiB,MAAQjB,EAAWiB,IAAM,EACtEE,GAAgB/K,EAAAA,EAAAA,IAAmB4J,EAAWgB,WAChDhB,EAAWgB,eACXtK,EAEEyI,EAAe,CACnBpD,KAAMC,EAAAA,GAAAA,OACNG,UAAMzF,EACN0F,YAAa,GACbH,UAAWiD,EAAMK,WACjBrD,cAAc,EACd2D,aAAcX,EAAME,kBAAoB,QACxCC,MAAOH,EAAMnC,QAAU,QAAU,SACjCmE,cAAAA,EACAC,cAAAA,GAGF,OAAO,kBACFjC,GAAK,IACRnD,KAAM,SACNuD,SAAU,QACVlI,QAAO,SAAC+E,GACN,IAAIqD,EAA0BrB,EAAahC,GAE3C,IAAI/F,EAAAA,EAAAA,IAAmBoJ,GAAW,CAChC,GAAIrI,OAAOwH,MAAMa,GACf,OAAO5D,EACLkC,EAAa3B,GACb,iDAKA/F,EAAAA,EAAAA,IAAmB4J,EAAWgB,aAChCxB,EAC2B,IAAzBQ,EAAWgB,UACPnC,KAAKuC,MAAM5B,GACXX,KAAKuC,MAAM5B,EAAQ,SAAG,GAAMQ,EAAWgB,YAAU,SACjD,GAAMhB,EAAWgB,aAIrB5K,EAAAA,EAAAA,IAAmB4J,EAAWiB,OAChCzB,EAAWX,KAAKwC,IAAI7B,EAAUQ,EAAWiB,OAIvC7K,EAAAA,EAAAA,IAAmB4J,EAAWqB,OAChC7B,EAAWX,KAAKoC,IAAIzB,EAAUQ,EAAWqB,KAE7C,CAEA,OAAO,kBACFlC,GAAY,IACfhD,KAAMqD,EACNpD,aAAahG,EAAAA,EAAAA,IAAmBoJ,GAC5BhB,EAAagB,GACb,GACJC,gBAAgBzH,EAAAA,EAAAA,IAAkBwH,IAEtC,EACAvJ,aAAY,SAACH,GACX,YAAqBY,IAAdZ,EAAKqG,KAAqB,KAAOrG,EAAKqG,IAC/C,GAEJ,CAEA2E,EAAapB,gBAAiB,EAE9B,QCxGa4B,EAAc,IAAIzM,IAC7BiC,OAAOyK,QAAQ,CACbC,OAAQvC,EACRwC,KAAM9B,EACN+B,QAAS9B,EACT+B,YAAa7B,EACb8B,KAAMf,EACNgB,OAAQf,KCYL,SAASgB,EACdC,EACAC,EACAC,GAIA,IAAMC,EAAQ,IAAIC,OAAO,GAAD,OACnBJ,EAAa,uCAA+BC,EAAQ,wBACvD,MAGFC,EAAWA,EAASG,QAAQ,KAAM,MAElC,IAAMC,EAAQH,EAAMI,KAAKL,GACzB,GAAII,EACF,OAAOA,EAAM,GAAG/E,MAIpB,CAEO,SAASiF,EAAmBnG,GAEjC,OAAOA,EAAYgG,QAAQ,iBAAkB,IAC/C,CA0HO,SAASI,EACdrG,EACAsG,GAEA,IAAMtC,EAAYhE,EAAKuG,MAAMC,MAAMF,GAC7B/F,EAAQP,EAAKyG,WAAWH,GAC1BlD,GAAa,EAOjB,MALsC,UAAlCW,EAAAA,GAAAA,YAAmBC,KAErBZ,GAAa,GAGR,CACL9C,GAAG,SAAD,OAAWgG,GACblD,WAAAA,EACA7C,MAAAA,EACAyD,UAAAA,EACApD,SAAS,EACT8F,UAAU,EAEd,CAUO,SAASC,EACd3G,EACA4G,GAEA,IAYI3C,EAZE1D,EAAQP,EAAKlH,QAAQ,GAAG8N,GAC1B5C,EAAYhE,EAAKuG,MAAMvG,KAAK4G,GAYhC,IAVI/K,EAAAA,EAAAA,IAAkBmI,KAEpBA,EAAY,CACV6C,KAAM,KACNC,WAAY,SACZC,YAAa,WAKqB,gBAAlChD,EAAAA,GAAAA,YAAmBC,GAA8B,CAEnD,IAAMF,EAAU9D,EAAKgH,sBAAsBJ,IACvC3M,EAAAA,EAAAA,IAAmB6J,KACrBG,EAAqB,CACnBH,QAAAA,GAGN,CAEA,MAAO,CACLxD,GAAG,UAAD,OAAYC,EAAK,YAAIqG,GACvBxD,YAAY,EACZ7C,MAAAA,EACAyD,UAAAA,EACAC,mBAAAA,EACArD,SAAS,EACT8F,UAAU,EAEd,CAoEO,SAASO,EACdhO,EACAiO,GAEW,IACPlE,EAFJmE,EAA6B,4DAAG5M,EAqBhC,GAAI4F,EAfF6C,EAHkB,WAAhB/J,EAAO2G,KAGM3G,EAAOgC,SACpBhB,EAAAA,EAAAA,IAAmBiN,EAAUE,SACzBhB,EACErC,EAAAA,GAAAA,OACEmD,EAAUE,QACVF,EAAUG,YACVH,EAAUI,QAGd,MAGSrO,EAAOgC,QAAQiM,EAAUE,UAKxC,OAAOpE,EAGT,IAAK/J,EAAOmK,WAAY,CAEtB,IAAInJ,EAAAA,EAAAA,IAAmBiN,EAAUK,gBAAiB,CAChD,IAAMtH,EAAcmG,EAAmBc,EAAUK,iBAG7CvE,EAAapD,OAASC,EAAAA,GAAAA,MAKfmD,EAAapD,OAASC,EAAAA,GAAAA,UAJ/BmD,GAAY,kBACPA,GAAY,IACf/C,YAAAA,IASN,CAEIkH,GAAaD,EAAUM,QACzBxE,EAxSC,SACLrJ,EACA6N,EACAL,GAEA,IAAM1G,EAAgB,CAAC,EAGjBgH,EAAY9B,EAAmB6B,EAAO,QAASL,GACjDM,IACFhH,EAActC,SAAWsJ,GAI3B,IAAMC,EAAkB/B,EACtB6B,EACA,mBACAL,GAcF,OAZIO,IACFjH,EAAchC,OAASiJ,GAGD,WAApBA,QAA8CnN,IAAdkN,IAKlChH,EAActC,SAAW,WAGvBsC,GAEK,kBACF9G,GAAI,IACP8G,cAAAA,IAGG9G,CACT,CAiQqBgO,CACb3E,EACAkE,EAAUM,MACVL,GAGN,CACA,OAAOnE,CACT,CClSA,OAzDA,SACEhD,EACAlH,EACAN,EACAiC,GAgDA,MAAO,CACLmN,eA/CqBC,EAAAA,aACrB,YAAsD,IAAD,eAAnD1M,EAAG,KAAE3B,EAAG,KACR,GAAI2B,EAAMrC,EAAQwC,OAAS,EACzB,OAAOmE,EACL,8BACA,qDAIJ,GAAIjG,EAAMhB,EAAU,EAClB,OAAOiH,EACL,2BACA,qDAGJ,IAAMxG,EAASH,EAAQqC,GAEjB2M,EAAc7O,EAAOE,YACrB4O,EAActN,EAAauN,QAAQC,oBAAoBzO,GAG7D,GAAIP,EAAOmK,YAAc3I,EAAauN,QAAQ5M,WAAW2M,GAAc,CACrE,IAAMG,EAAazN,EAAauN,QAAQ/M,QACtC6M,EACAC,GAEF,QAAmBxN,IAAf2N,EACF,OAAOA,CAEX,CAEA,IAGE,OAAOjB,EAAiBhO,EADN+G,EAAK/E,QAAQ8M,EAAc,EAAGD,GACL9H,EAAKmH,UAOlD,CANE,MAAO7F,GAEP,OADA6G,EAAAA,EAAAA,GAAS7G,GACF7B,EACL,8BAA8B,8DAAD,OACiC6B,GAElE,CACF,GACA,CAACxI,EAASN,EAASwH,EAAMvF,IAM7B,EC1EM2N,GAAa,GAGbC,GAAkB,GAGlBC,GAAmB,EAAIF,GAAa,EACpCG,GAAuB,IAgJ7B,OArHA,SACEC,EACAhQ,EACAiQ,EACAC,EACAC,GAEA,IA0BIC,EA1BAC,EAtBC,SAA4BrQ,GAEjC,OAAOkK,KAAKwC,IAAI1M,EAAU4P,GAAa,EAAI,EAAGE,GAChD,CAmBkBQ,CACdtQ,EACE,GACCgQ,EAAQO,cAAgBC,EAAAA,GAAAA,YAAAA,QAAiC,EAAI,IAG9DC,EAAgBvG,KAAKoC,IAAI+D,EAAWN,IAEpCC,EAAQU,SAEVD,EAAgBvG,KAAKwC,IAAIsD,EAAQU,OAAQZ,IACzCO,EAAYnG,KAAKwC,IAAIsD,EAAQU,OAAQL,IAGnCH,IAGFO,EAAgBvG,KAAKoC,IAAImE,EAAeP,GACxCG,EAAYnG,KAAKoC,IAAI+D,EAAWH,GAE3BF,EAAQU,SAEXD,EAAgBJ,IAKpB,IAAIM,EAAWV,EAEXD,EAAQY,kBAEVR,EAAeH,EACND,EAAQ3H,QAEjB+H,EAAelG,KAAKoC,IAClBpC,KAAKwC,IAAIsD,EAAQ3H,MAAOwH,IACxBI,GAEFU,EAAWzG,KAAKoC,IAAIpC,KAAKwC,IAAIsD,EAAQ3H,MAAOsI,GAAWV,IAGzD,MAA0CZ,EAAAA,SAA8B,CACtEhH,MAAO+H,GAAgB,OACvBM,OAAQD,IACR,eAHKI,EAAa,KAAEC,EAAgB,KA0DtC,OArDAzB,EAAAA,iBAAsB,WAGhBW,EAAQY,mBAA6C,SAAxBC,EAAcxI,OAC7CyI,EAAiB,CACfzI,MAAO4H,EACPS,OAAQG,EAAcH,QAG5B,GAAG,CAACT,IAGJZ,EAAAA,iBAAsB,WACpByB,EAAiB,CACfzI,MAAOwI,EAAcxI,MACrBqI,OAAQD,GAEZ,GAAG,CAACzQ,IAGJqP,EAAAA,iBAAsB,WACpByB,EAAiB,CACfzI,MAAO+H,GAAgB,OACvBM,OAAQG,EAAcH,QAE1B,GAAG,CAACN,IAGJf,EAAAA,iBAAsB,WACpByB,EAAiB,CACfzI,MAAOwI,EAAcxI,MACrBqI,OAAQD,GAEZ,GAAG,CAACA,IAGJpB,EAAAA,iBAAsB,WACpB,GAAIc,EAAc,CAChB,IAAMY,EACJf,EAAQY,oBACPnP,EAAAA,EAAAA,IAAmBuO,EAAQ3H,QAAU2H,EAAQ3H,MAAQ,EACxDyI,EAAiB,CACfzI,MAAO0I,EAAiBJ,EAAW,OACnCD,OAAQL,GAEZ,MACES,EAAiB,CACfzI,MAAO+H,GAAgB,OACvBM,OAAQD,GAGd,GAAG,CAACN,IAEG,CACLa,UAAWpB,GACXqB,UAAWnB,GACXO,UAAAA,EACAa,SAAUrB,GACVc,SAAAA,EACAE,cAAAA,EACAC,iBAAAA,EAEJ,EC8FA,OAnNA,SACExQ,EACA6Q,EACAlP,EACAmN,EACAgC,EACAC,EAKAC,GAEA,IAAMC,EAAelC,EAAAA,aACnB,WAEEmC,GACU,IAAD,eAFR7O,EAAG,KAAE3B,EAAG,KAGHP,EAASH,EAAQqC,GAEjB2M,EAAc7O,EAAOE,YAKrB4O,EAActN,EAAauN,QAAQC,oBACvC2B,EAAiBpQ,IAEbyQ,EAAcrC,EAAe,CAACzM,EAAK3B,IACnC0Q,EAAejR,EAAOa,aAAamQ,GACnCE,EAAWlR,EAAOa,aAAakQ,GACrC,GAAK7J,EAAY8J,IAAgBE,IAAaD,EAA9C,CAKA,IAAME,EAAUnR,EAAOgC,QAAQkP,GAE/B1P,EAAauN,QAAQqC,QAAQvC,EAAaC,GAAY,kBACjDqC,GAAO,IACVE,YAAaC,YAAYC,SAG3BV,GATA,CAUF,GACA,CAAChR,EAAS2B,EAAcmP,EAAkBhC,EAAgBkC,IAGtDW,EAAgB5C,EAAAA,aAAkB,WACtC,IAAI8B,EAAJ,CAKA,IAAMe,EAAgC,IAAIhS,IAC1CI,EAAQE,SAAQ,SAAAC,GACdyR,EAAOxR,IAAID,EAAOE,YAAaF,EAAOgC,aAAQV,GAChD,IACAE,EAAauN,QAAQ2C,OAAOD,GAC5BZ,GAAW,GAAO,EAPlB,CAQF,GAAG,CAAChR,EAAS2B,EAAckP,IAErBiB,EAAW/C,EAAAA,aACf,SAACgD,GAAuD,IAAD,EACrD,GAAIA,EAAUrP,KAAKF,OAAS,EAAG,CAE7B,GAAIqO,EAEF,OAAO,EAGT,IAAMmB,EAAeD,EAAUrP,KAAKuP,UAAUhQ,KAAI,SAAAvB,GAChD,OAAOiB,EAAauN,QAAQC,oBAC1B2B,EAAiBpQ,GAErB,IAIA,OAFAiB,EAAauN,QAAQgD,WAAWF,GAChChB,GAAW,IACJ,CACT,CACA,GAAqB,QAArB,EAAIe,EAAU7C,eAAO,OAAjB,EAAmBiD,MAAO,CAI5B,IAFA,IAAMC,EAA6C,GAC7CC,EAAeN,EAAU7C,QAAQiD,MAEjCzR,EAAM2R,EAAaC,EACvB5R,EAAM2R,EAAaC,EAAID,EAAajC,OACpC1P,IAEA,IACE,IAAI2B,EAAMgQ,EAAa/G,EACvBjJ,EAAMgQ,EAAa/G,EAAI+G,EAAatK,MACpC1F,IACA,CACA,IAAMlC,EAASH,EAAQqC,GACnBlC,EAAOmK,aACT8H,EAAahR,KAAK,CAChBP,KAAM,CAACwB,EAAK3B,KAEduQ,EACE,CAAC5O,EAAK3B,GACNP,EAAOgC,QAAQ,OAGrB,CAOF,OAJIiQ,EAAa5P,OAAS,IACxBwO,IACAD,EAAaqB,KAER,CACT,CACA,OAAO,CACT,GACA,CACEpS,EACA2B,EACAkP,EACAE,EACAD,EACAE,IAIEuB,EAAUxD,EAAAA,aACd,SAACyD,EAAcC,GAKb,IAJA,cAA+BD,EAAM,GAA9BE,EAAS,KAAEC,EAAS,KAErBP,EAA6C,GAE1C1R,EAAM,EAAGA,EAAM+R,EAAOjQ,OAAQ9B,IAAO,CAC5C,IAAMkS,EAAUH,EAAO/R,GACvB,GAAIA,EAAMiS,GAAahR,EAAauN,QAAQ2D,aAAc,CACxD,GAAIhC,EAEF,MAIFc,GACF,CACA,IAAK,IAAItP,EAAM,EAAGA,EAAMuQ,EAAQpQ,OAAQH,IAAO,CAC7C,IAAMyQ,EAAiBF,EAAQvQ,GAEzB1B,EAAWD,EAAMiS,EACjB7R,EAAWuB,EAAMqQ,EAEvB,GAAI5R,GAAYd,EAAQwC,OAEtB,MAGF,IAAMrC,EAASH,EAAQc,GAEvB,GAAIX,EAAOmK,WAAY,CACrB,IAAMgH,EAAUnR,EAAOgC,QAAQ2Q,GAE/B,IAAKzL,EAAYiK,GAAU,CACzB,IAAMtC,EAAc7O,EAAOE,YACrB4O,EAActN,EAAauN,QAAQC,oBACvC2B,EAAiBnQ,IAEbyQ,EAAejR,EAAOa,aAC1B8N,EAAe,CAAChO,EAAUH,KAEXR,EAAOa,aAAasQ,KAEpBF,IACfzP,EAAauN,QAAQqC,QAAQvC,EAAaC,GAAY,kBACjDqC,GAAO,IACVE,YAAaC,YAAYC,SAG3BU,EAAahR,KAAK,CAChBP,KAAM,CAACC,EAAUH,KAGvB,CACF,CACF,CAEIyR,EAAa5P,OAAS,IACxBwO,IACAD,EAAaqB,GAEjB,CAEA,OAAO,CACT,GACA,CACEpS,EACA2B,EACAkP,EACAC,EACAhC,EACA6C,EACAX,EACAD,IAIJ,MAAO,CACLE,aAAAA,EACAsB,QAAAA,EACAZ,cAAAA,EACAG,SAAAA,EAEJ,EC9LA,OA3CA,SAAwB9R,GAEtB,OAAsC+S,EAAAA,EAAAA,WACpC,kBAAM,IAAInT,GAAK,IAChB,eAFMoT,EAAW,KAAEC,EAAc,KAI5BC,EAAiBnE,EAAAA,aACrB,SACE5O,EACAgT,EACAC,EACAC,GAEIlT,EAAOqH,IACTyL,EAAe,IAAIrT,IAAIoT,GAAa5S,IAAID,EAAOqH,GAAI6L,GAEvD,GACA,CAACL,IAoBH,MAAO,CACLhT,QAjBmBA,EAAQiC,KAAI,SAAA9B,GAC/B,OACEA,EAAOqH,IACPwL,EAAY5Q,IAAIjC,EAAOqH,UACQ/F,IAA/BuR,EAAYjS,IAAIZ,EAAOqH,KAEhB,kBACFrH,GAAM,IACT4H,MAAOiL,EAAYjS,IAAIZ,EAAOqH,IAE9BK,KAAM,IAGH1H,CACT,IAIE+S,eAAAA,EAEJ,E,WC+DA,OAnDA,SACExT,EACAM,EACA8O,GAEA,MAAwBC,EAAAA,WAAkC,eAAnDpM,EAAI,KAAE2Q,EAAO,KAEpB,GACEC,EAAAA,GAAAA,IAAmB,CACjBvT,QAASA,EAAQiC,KAAI,SAAA9B,GAAM,OAAIoH,EAAcpH,EAAO,IACpD2O,eAAAA,EACApM,KAAMhD,EACNiD,KAAAA,IALoB6Q,EAAoB,EAApC1E,eAAsCgC,EAAgB,EAAhBA,iBAQxC2C,EApDR,SACEzT,EACA2C,GAEA,YAAalB,IAATkB,EACK3C,EAEFA,EAAQiC,KAAI,SAAA9B,GACjB,OAAIA,EAAOqH,KAAO7E,EAAKxC,OAAOqH,IACrB,kBACFrH,GAAM,IACTsH,MACqB,QAAnB9E,EAAK+Q,UAAmB,iBAAQvT,EAAOsH,OAAK,iBAAUtH,EAAOsH,SAG5DtH,CACT,GACF,CAmCyBwT,CAAoB3T,EAAS2C,GAE9CiR,EAAa7E,EAAAA,aACjB,SAACrB,GACC,IAAImG,EAAgB,MACdC,EAAgBL,EAAe/F,GAErC,GAAI/K,GAAQA,EAAKxC,OAAOqH,KAAOsM,EAActM,GAAI,CAE/C,GAAuB,QAAnB7E,EAAK+Q,UAMP,YADAJ,OAAQ7R,GAHRoS,EAAgB,MAMpB,CAEAP,EAAQ,CACNnT,OAAQoH,EAAcuM,GACtBJ,UAAWG,EACXE,KAAMD,EAAczJ,UAExB,GACA,CAAC1H,EAAM8Q,IAGT,MAAO,CACLzT,QAASyT,EACTG,WAAAA,EACA9C,iBAAAA,EACAhC,eAAgB0E,EAEpB,ECjGaQ,GAAmB,QAEnBC,GAAyB,OA0G/B,SAASC,GAAc/T,GAE5B,IAAIgU,EAcJ,OAbIhT,EAAAA,EAAAA,IAAmBhB,EAAOiU,cACxB/H,EAAYjK,IAAIjC,EAAOiU,YACzBD,EAAa9H,EAAYtL,IAAIZ,EAAOiU,aAEpCC,EAAAA,EAAAA,IAAW,2DAAD,OACmDlU,EAAOiU,eAIpErR,EAAAA,EAAAA,IAAkBoR,KAEpBA,EN7BG,SAAgCjJ,GACrC,IAAIoJ,EAAWpJ,EAAYD,EAAAA,GAAAA,YAAmBC,GAAa,KAE3D,OAAKoJ,GAKLA,EAAWA,EAASrL,cAAcZ,OAE9B,CAAC,UAAW,SAASpF,SAASqR,GACzB5J,EAGP,CACE,SACA,OACA,OACA,WACA,aACA,UACA,SACAzH,SAASqR,GAEJtK,EAEL,CAAC,QAAQ/G,SAASqR,GACb3J,EAGP,CACE,OACA,QACA,QACA,QACA,QACA,SACA,SACA,SACA,UACA,UACA,UACA,UACA,WACA,SACA1H,SAASqR,GAEJzI,EAEQ,gBAAbyI,EACKzJ,EAELyJ,EAAShM,WAAW,QACfsD,EAGF5B,GAnDEA,CAoDX,CM5BiBuK,CAAuBpU,EAAO+K,YAEtCiJ,CACT,CAmEA,OAxDA,SACEzE,EACAxI,EACAsN,GAGA,IAAMC,EA3DD,SAAyB/E,GAC9B,IAAKA,EAAQ1P,QACX,OAAO,IAAIJ,IAEb,IACE,OAAO,IAAIA,IAAIiC,OAAOyK,QAAQjL,KAAKO,MAAM8N,EAAQ1P,UAMnD,CALE,MAAOwI,GAIP,OADA6G,EAAAA,EAAAA,GAAS7G,GACF,IAAI5I,GACb,CACF,CA+C8B8U,CAAgBhF,GAEtCe,EACJf,EAAQY,oBACPnP,EAAAA,EAAAA,IAAmBuO,EAAQ3H,QAAU2H,EAAQ3H,MAAQ,EAGlD4M,ENqGD,SAAgCzN,GAAkC,IAAD,YAChElH,EAA6B,GAG7B4U,EAAsC,QAA5B,EAAa,QAAb,EAAG1N,EAAKuG,aAAK,OAAO,QAAP,EAAV,EAAYC,aAAK,WAAP,EAAV,EAAmBlL,cAAM,QAAI,EAC1CqS,EAAsC,QAA5B,EAAe,QAAf,EAAG3N,EAAKlH,eAAO,OAAK,QAAL,EAAZ,EAAe,UAAE,WAAL,EAAZ,EAAmBwC,cAAM,QAAI,EAEhD,GAAmB,IAAfoS,GAAmC,IAAfC,EAItB,OADA7U,EAAQoB,KAzBH,CACLoG,GAAG,cACHC,MAAO,GACPpH,YAAa,EACbiK,YAAY,EACZxC,SAAS,IAqBF9H,EAGT,IAAK,IAAIoD,EAAI,EAAGA,EAAIwR,EAAYxR,IAAK,CACnC,IAAMjD,GAAM,kBACPoN,EAAkBrG,EAAM9D,IAAE,IAC7B/C,YAAa+C,IAGfpD,EAAQoB,KAAKjB,EACf,CAEA,IAAK,IAAIiD,EAAI,EAAGA,EAAIyR,EAAYzR,IAAK,CACnC,IAAMjD,GAAM,kBACP0N,EAAmB3G,EAAM9D,IAAE,IAC9B/C,YAAa+C,EAAIwR,IAGnB5U,EAAQoB,KAAKjB,EACf,CACA,OAAOH,CACT,CMrI0C8U,CAAuB5N,GAC5DjF,KAAI,SAAA9B,GAEH,IAAI4U,GAAa,0BACZ5U,GAhIJ,SACL6U,EACAP,GACkB,IAAD,EAMbQ,EALJ,OAAKR,GAMDA,EAAoBrS,IAAI4S,EAAYvN,OAEtCwN,EAAeR,EAAoB1T,IAAIiU,EAAYvN,OAEnDgN,EAAoBrS,IAAI,GAAD,OAClB6R,IAAsB,OAAGe,EAAY3U,cAI1C4U,EAAeR,EAAoB1T,IAAI,GAAD,OACjCkT,IAAsB,OAAGe,EAAY3U,cAG1C2U,EAAYlN,SACZ2M,EAAoBrS,IAAI4R,MAGxBiB,EAAeR,EAAoB1T,IAAIiT,KAGpCiB,GAOE9M,EAAAA,EAAAA,QAAM,UACN6M,GACL,CACEvN,MAAOwN,EAAaxN,MACpBM,MAAOkN,EAAalN,MACpBqM,WAA6B,QAAnB,EAAEa,EAAaC,YAAI,aAAjB,EAAmBjM,cAAcZ,OAC7CiC,WAAY2K,EAAaE,SACzBvH,SAAUqH,EAAaG,OACvBjK,mBAAoB8J,EAAaI,SACjClL,iBAAkB8K,EAAaK,YAd1BN,GA1BAA,CA2CX,CAgFWO,CAAkBpV,EAAQsU,IAAoB,IACjD7M,YAAa6I,IAGT0D,EAAaD,GAAca,GAejC,OAVErF,EAAQO,cAAgBC,EAAAA,GAAAA,YAAAA,WACxBsE,IAC8B,IAA9BL,EAAW1J,kBAEXsK,GAAa,kBACRA,GAAa,IAChBzK,YAAY,KAIT6J,EAAWY,EACpB,IACCrJ,QAAO,SAAAvL,GAEN,OAAQA,EAAOyN,QACjB,IASF,MAAO,CACL5N,QALA2U,EAAkBnS,OAAS,EACvBmS,EACA,CAAC3K,ENkDA,CACLxC,GAAG,cACHC,MAAO,GACPpH,YAAa,EACbiK,YAAY,EACZxC,SAAS,KMlDb,E,YC7Ma0N,IAA2B,E,SAAA,gCAAW,kBAAQ,MAAQ,CACjEC,SAAU,WACVC,QAAS,eAET,qBAAsB,CACpBtF,OAAQ,OACRQ,SAAU,OACV+E,aAPuD,EAALtS,MAO9BkD,MAAMC,IAG5B,mBAAiB,GACfoP,eAAgB,SAAM,UACrB,YAAqB,uBAAoB,UACzC,YAAqB,sBAAoB,GAE7C,GAAC,I,uBCsBIC,GAAmB,GAEnBC,GAAmB,IAEnBC,GAAwB,IAGxBC,GAAmB,IAKnBC,GAA6B,KAgB7BC,GAA2C,SAAAC,GAC/C,IAAQtV,EAAgBsV,EAAhBtV,KAAMwC,EAAU8S,EAAV9S,MACd,QhBoDK,SAA4BxC,GACjC,OACEA,EAAKyG,eAAe,mBACnBzG,EAA0B2J,cAE/B,CgBzDM4L,CAAmBvV,MACrBwV,EAAAA,EAAAA,KAAa,kBAENF,GAAI,IACP9S,OAAM,kBACDA,GAAK,IACRgC,SAAUhC,EAAMmC,UAChBD,WAAYlC,EAAMmC,YAIpB8Q,cAAe,CAAC,EAChBC,eAAe,IAjCE,OAoCnB1V,EAAK+J,eAEA,EAIX,EAqYA,QAAe4L,EAAAA,EAAAA,IAxXf,SAAmB,GAQe,IAPhC9G,EAAO,EAAPA,QACAxI,EAAI,EAAJA,KACOyI,EAAc,EAArB5H,MACQ6H,EAAe,EAAvBQ,OACAoE,EAAQ,EAARA,SACAiC,EAAS,EAATA,UACA5G,EAAY,EAAZA,aAEM6G,EAAe3H,EAAAA,OAAwB,MACvC4H,EAAgB5H,EAAAA,OAA4B,MAE5C6H,GAAgBC,EAAAA,EAAAA,MAChBxT,EAAQyT,IAEd,EAAkC/H,EAAAA,UAAwB,GAAK,eAAxDgI,EAAS,KAAEC,EAAY,KAE9B,EAA0CjI,EAAAA,SAA8B,CACtE/O,QAASiX,EAAAA,GAAAA,QACTvU,KAAMuU,EAAAA,GAAAA,QACN/H,aAASzN,IACT,eAJKyV,EAAa,KAAEC,EAAgB,KAOhCC,EAAiBrI,EAAAA,aAAkB,WACvCoI,EAAiB,CACfnX,QAASiX,EAAAA,GAAAA,QACTvU,KAAMuU,EAAAA,GAAAA,QACN/H,aAASzN,GAEb,GAAG,IAGGsP,EAAehC,EAAAA,aACnB,SACEsI,GAGI,IAAD,EACkB,QAArB,EAAAV,EAAczH,eAAO,OAArB,EAAuBoI,YAAYD,EACrC,GACA,KAOEtU,EAAAA,EAAAA,IAAkB2M,EAAQO,eAC5BP,EAAQO,YAAcC,EAAAA,GAAAA,YAAAA,WAGxB,MAA+BA,EAAAA,GAAAA,YAAvBqH,EAAS,EAATA,UAAWC,EAAO,EAAPA,QAGbC,EAAiBvQ,EAAKwQ,WACtBC,EAAkB/N,KAAKwC,IAAI,EAAGqL,EAAe/U,KAAO,GAIpDkV,EACgB,IAApBD,KAGEjI,EAAQO,cAAgBuH,GAAWC,EAAeI,YAAc,GAG9DC,EAAeH,EAAkB1B,GAEjCtU,EAAeoN,EAAAA,OACnB,IAAIgJ,EAAaJ,IAGnB,EAA8B5I,EAAAA,SAC5BpN,EAAauN,QAAQ2D,cACtB,eAFMnT,EAAO,KAAEsY,EAAU,KAI1BjJ,EAAAA,WAAgB,WACdpN,EAAauN,QAAU,IAAI6I,EAAaJ,GACxCK,EAAWrW,EAAauN,QAAQ2D,aAClC,GAAG,CAAC8E,IAEJ,IAAMM,EAAoBlJ,EAAAA,aAAkB,WAC1CpN,EAAauN,QAAU,IAAI6I,EAAaJ,GACxCK,EAAWrW,EAAauN,QAAQ2D,aAClC,GAAG,CAAC8E,IAEaO,EAAoBC,GAAgBzI,EAASxI,EAAMsN,GAA5DxU,QAKR+O,EAAAA,WAAgB,WACd,GAAIW,EAAQO,cAAgBsH,EAAW,CACrC,IAAMa,EAAqB3B,EAAU4B,eAAe3I,GAChD0I,IACFzW,EAAauN,QAAQoJ,SAASF,EAAoBF,GAClDF,EAAWrW,EAAauN,QAAQ2D,cAEpC,CACF,GAAG,IAEH,IAAwB0F,EAA2BC,GACjDtR,EACAgR,EACAxY,EACAiC,GAJMmN,eAOR,EACE2J,GAAcd,EAAiBO,EAAiBK,GAD1CvY,EAAO,EAAPA,QAAS4T,EAAU,EAAVA,WAAY9C,EAAgB,EAAhBA,iBAAkBhC,EAAc,EAAdA,eAWzCkC,GAAajC,EAAAA,aACjB,WAAmD,IAAlD2J,EAAe,wDAAUC,IAAY,yDAChCjZ,IAAYiC,EAAauN,QAAQ2D,cAEnCmF,EAAWrW,EAAauN,QAAQ2D,cAG9B6F,GACFtB,KAIFwB,EAAAA,EAAAA,IAAS5C,IAAkB,WACzB,IAAM6C,EAAsBlX,EAAauN,QAAQ4J,OAAO9Y,GACpD+Y,EAAqBtC,EAAU4B,eACjC3I,QAGyBjO,IAAvBsX,IAEFA,EAAqB,IAAIhB,EAAa,GAAGe,OAAO,KAI9CD,IAAwBE,GAC1BtC,EAAUuC,eACRtJ,EACAmJ,EACA,CACEI,OAAQN,GAIhB,GArBAC,EAsBF,GACA,CAACnC,EAAW/G,EAAShQ,IAGvB,GAA2DwZ,GACzDlZ,EACA0P,EAAQO,cAAgBuH,EACxB7V,EACAmN,EACAgC,EACAC,EACAC,IAPMC,GAAY,GAAZA,aAAcsB,GAAO,GAAPA,QAASZ,GAAa,GAAbA,cAAeG,GAAQ,GAARA,SAU9C,GAAkDqH,GAChDnZ,EAAQiC,KAAI,SAAA9B,GAAM,OAAIoH,EAAcpH,EAAO,KAD5BiZ,GAAY,GAArBpZ,QAAuBkT,GAAc,GAAdA,eAI/B,GAQImG,GACF3J,EACAhQ,EACAiQ,EACAC,EACAC,GAZAa,GAAS,GAATA,UACAC,GAAS,GAATA,UACAZ,GAAS,GAATA,UACAa,GAAQ,GAARA,SACAP,GAAQ,GAARA,SACAE,GAAa,GAAbA,cACAC,GAAgB,GAAhBA,iBAWI8I,GAAuBvK,EAAAA,aAC3B,YAAwD,IAAD,eAAjD,KAAM,KACV,OAAO,kBhBrJN,SAAqB/H,EAAmBuS,GAC7C,IAAMnP,EAAQmP,EAAQ,QAAU,SAChC,MAAO,CACLzS,KAAMC,EAAAA,GAAAA,KACNG,KAAM,GACNC,YAAa,GACbF,cAAc,EACdD,SAAAA,EACAoD,MAAAA,EAEJ,CgB4IWoP,EAAY,GAAM,IAAM,IAC3BrS,YAAa,QACbyD,aAAc,SACd3D,cAAc,EACdU,cAAe,CACbtC,SAAUhC,EAAMmC,WAElBiU,KAAM,CAAC,EAAG7P,KAAKwC,IAAIpM,EAAQwC,OAAS,EAAG,KAE3C,GACA,CAACxC,IAiBH,OAbA+O,EAAAA,WAAgB,WACd,IAAM2K,EAAkB,IAAIC,EAAAA,GAO5B,OANAD,EAAgBE,wBACdnD,EACA/G,EAAQmK,OACR5B,GAGK,WACLyB,EAAgBI,YAClB,CACF,GAAG,KAGD,UAACtE,GAAwB,CACvBuE,UAAU,cACVC,OAAQ,WAEDjD,GACHK,GAEJ,EAAE,UAEF,UAAC,IAAS,CACR,cAAY,uBACZ6C,IAAKvD,EACLwD,YAAa3J,GACbnG,MAAO,CACL+P,OAAO,aAAD,OAAe9W,EAAMS,aAC3B6R,aAAa,GAAD,OAAKtS,EAAMiD,oBAEzBqK,UAAWA,GACXZ,UAAWA,GACXa,SAAUA,GACVP,SAAUA,GACV9E,KAAMgF,GACN6J,OAAQ,CACNC,KAAK,EACLC,OAAO,EACPC,QAAQ,EACRC,MAAM,EACNC,UAAU,EACVC,aAAa,EACbC,YAAY,EACZC,SAAS,GAEXC,KAAM,CAAC,EAAGnK,IACVoK,QAASpK,GAAY,EACrBqK,aAAc,SAACC,EAAQC,EAAYC,EAAMC,GACnCzE,EAAaxH,SACfsB,GAAiB,CACfzI,MAAO2O,EAAaxH,QAAQ3D,KAAKxD,MACjCqI,OAGEL,GAAY2G,EAAaxH,QAAQ3D,KAAK6E,SAAW,EAC7CsG,EAAaxH,QAAQ3D,KAAK6E,OAAS,EACnCsG,EAAaxH,QAAQ3D,KAAK6E,QAGtC,EAAE,UAEF,UAAC,MAAe,gBACd2J,UAAU,kBACVE,IAAKtD,EACL3W,QAASoZ,GACT1W,KAAMkV,EAAe,EAAIlY,EACzB0b,eAAgBvF,GAChBwF,eAAgBvF,GAChBwF,mBAAoBvF,GACpBrF,UAAWA,GACX6K,aAAc7K,GACd5B,eAAgB8I,EAAe0B,GAAuBxK,EACtDoE,eAAgBA,GAEhBsI,cACE5D,EACI,EACA5X,EAAQ0L,QAAO,SAACrJ,GAAe,OAAKA,EAAIyF,OAAO,IAAEtF,OAEvDiZ,eAAe,EACfC,eAAe,EAEfC,eAAgB,SAACtZ,GAAW,QAIxBA,GAAOrC,EAAQwC,SACdkN,EAAQY,mBAA6C,SAAxBC,GAAcxI,OAC7C,EAGH6T,sBAAsB,EAEtBC,WAAY,OAEZC,YAAa,OACbC,aAAc,OACdC,UAAW,OAEXC,YAAa,CAAEC,QAAQ,EAAMC,UAAU,GAEvCC,gBAEExE,GAAgBE,OAAerW,EAAYmS,EAE7CsD,cAAeA,EACfmF,sBAAuBlF,EAEvBmF,SAAUpG,GACV7S,MAAOA,EACPkZ,YAAa,SAACpG,GAEM,kBAAdA,EAAKrP,MAA4BiQ,EACnCC,GAAa,GACU,kBAAdb,EAAKrP,MAA6BiQ,GAC3CC,GAAa,EAEjB,EAEAwF,cAAc,EACdC,cAAc,EACdC,aAAc,CAEZC,uBAAwB,GAG1BC,gBAAiBhG,EAAcgG,gBAE/BrK,SAAS,IAEHqF,GACJlI,EAAQO,cAAgBsH,IACvB/C,GAAY,CAEXqI,YAAY,EAEZ5L,aAAAA,GAEAsB,QAAAA,GAEAT,SAAAA,MAGE8F,GACJlI,EAAQO,cAAgBuH,GAAW,CAEjCsF,mBAAoB,CAClBC,QAAQ,EACRC,MAAM,GAERC,eAAgB,CACdtX,OAAQtC,EAAMmB,SACdqB,aAAcxC,EAAMmB,UAEtBqX,WAAY,WACZqB,iBAAkB,OAClBlB,UAAWxH,EAAW,OAAS,QAE/B7C,cAAe6C,OAAW/S,EAAYkQ,GAEtCyK,qBAAiB3a,QAM/B,G","sources":["../../../streamlit/frontend/src/components/widgets/DataFrame/EditingState.ts","../../../streamlit/frontend/src/components/widgets/DataFrame/hooks/useCustomTheme.ts","../../../streamlit/frontend/src/components/widgets/DataFrame/columns/utils.ts","../../../streamlit/frontend/src/components/widgets/DataFrame/columns/ObjectColumn.ts","../../../streamlit/frontend/src/components/widgets/DataFrame/columns/TextColumn.ts","../../../streamlit/frontend/src/components/widgets/DataFrame/columns/BooleanColumn.ts","../../../streamlit/frontend/src/components/widgets/DataFrame/columns/CategoricalColumn.ts","../../../streamlit/frontend/src/components/widgets/DataFrame/columns/ListColumn.ts","../../../streamlit/frontend/src/components/widgets/DataFrame/columns/NumberColumn.ts","../../../streamlit/frontend/src/components/widgets/DataFrame/columns/index.ts","../../../streamlit/frontend/src/components/widgets/DataFrame/arrowUtils.ts","../../../streamlit/frontend/src/components/widgets/DataFrame/hooks/useDataLoader.ts","../../../streamlit/frontend/src/components/widgets/DataFrame/hooks/useTableSizer.ts","../../../streamlit/frontend/src/components/widgets/DataFrame/hooks/useDataEditor.ts","../../../streamlit/frontend/src/components/widgets/DataFrame/hooks/useColumnSizer.ts","../../../streamlit/frontend/src/components/widgets/DataFrame/hooks/useColumnSort.ts","../../../streamlit/frontend/src/components/widgets/DataFrame/hooks/useColumnLoader.ts","../../../streamlit/frontend/src/components/widgets/DataFrame/styled-components.ts","../../../streamlit/frontend/src/components/widgets/DataFrame/DataFrame.tsx"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GridCell } from \"@glideapps/glide-data-grid\"\n\nimport { notNullOrUndefined, isNullOrUndefined } from \"src/lib/utils\"\n\nimport { BaseColumn } from \"./columns\"\n\n/**\n * The editing state keeps track of all table edits applied by the user.\n */\nclass EditingState {\n  // row -> column -> GridCell\n  // Using [number, number] as a key for a Map would not work.\n  private editedCells: Map<number, Map<number, GridCell>> = new Map()\n\n  // List of rows represented by of column -> GridCell mappings\n  private addedRows: Array<Map<number, GridCell>> = []\n\n  // List of deleted row IDs\n  private deletedRows: number[] = []\n\n  // The original number of rows in the table (without potential additions & deletions)\n  private numRows = 0\n\n  constructor(numRows: number) {\n    this.numRows = numRows\n  }\n\n  /**\n   * Convert the current editing state to a JSON string.\n   *\n   * @param columns - The columns of the table\n   * @returns JSON string\n   */\n  toJson(columns: BaseColumn[]): string {\n    const columnsByIndex = new Map<number, BaseColumn>()\n    columns.forEach(column => {\n      columnsByIndex.set(column.indexNumber, column)\n    })\n\n    const currentState = {\n      // We use snake case here since this is the widget state\n      // that is sent and used in the backend. Therefore, it should\n      // conform with the Python naming conventions.\n      edited_cells: {} as Record<string, any>,\n      added_rows: [] as Record<number, any>[],\n      deleted_rows: [] as number[],\n    }\n\n    // Loop through all edited cells and transform into the structure\n    // we use for the JSON-compatible widget state:\n    // \"<rowIndex>:<colIndex>\" -> edited value\n    this.editedCells.forEach(\n      (row: Map<number, GridCell>, rowIndex: number, _map) => {\n        row.forEach((cell: GridCell, colIndex: number, _map) => {\n          const column = columnsByIndex.get(colIndex)\n          if (column) {\n            currentState.edited_cells[`${rowIndex}:${colIndex}`] =\n              column.getCellValue(cell)\n          }\n        })\n      }\n    )\n\n    // Loop through all added rows and transform into the format that\n    // we use for the JSON-compatible widget state:\n    // List of column index -> edited value\n    this.addedRows.forEach((row: Map<number, GridCell>) => {\n      const addedRow: Record<number, any> = {}\n      row.forEach((cell: GridCell, colIndex: number, _map) => {\n        const column = columnsByIndex.get(colIndex)\n        if (column) {\n          const cellValue = column.getCellValue(cell)\n          if (notNullOrUndefined(cellValue)) {\n            addedRow[colIndex] = cellValue\n          }\n        }\n      })\n      currentState.added_rows.push(addedRow)\n    })\n\n    // The deleted rows don't need to be transformed\n    currentState.deleted_rows = this.deletedRows\n\n    // Convert undefined values to null, otherwise this is removed here since\n    // undefined does not exist in JSON.\n    const json = JSON.stringify(currentState, (k, v) =>\n      v === undefined ? null : v\n    )\n    return json\n  }\n\n  /**\n   * Load the editing state from a JSON string.\n   *\n   * @param columns - The columns of the table\n   * @returns JSON string\n   */\n  fromJson(editingStateJson: string, columns: BaseColumn[]): void {\n    const editingState = JSON.parse(editingStateJson)\n    // Map columns to column index\n    const columnsByIndex = new Map<number, BaseColumn>()\n    columns.forEach(column => {\n      columnsByIndex.set(column.indexNumber, column)\n    })\n\n    // Loop through all edited cells and transform into the structure\n    // we use for the editing state:\n    // row -> column -> GridCell\n    Object.keys(editingState.edited_cells).forEach(key => {\n      const [rowIndex, colIndex] = key.split(\":\").map(Number)\n      const column = columnsByIndex.get(colIndex)\n      if (column) {\n        const cell = column.getCell(editingState.edited_cells[key])\n        if (cell) {\n          if (this.editedCells.has(rowIndex) == false) {\n            this.editedCells.set(rowIndex, new Map())\n          }\n          this.editedCells.get(rowIndex)?.set(colIndex, cell)\n        }\n      }\n    })\n\n    // Loop through all added rows and transform into the format that\n    // we use for the editing state:\n    // List of column index -> edited value\n    editingState.added_rows.forEach((row: Record<number, any>) => {\n      const addedRow: Map<number, GridCell> = new Map()\n\n      // Initialize all cells in row with undefined (empty)\n      columns.forEach(column => {\n        addedRow.set(column.indexNumber, column.getCell(undefined))\n      })\n\n      // Set the cells that were actually edited in the row\n      Object.keys(row).forEach(colIndex => {\n        const column = columnsByIndex.get(Number(colIndex))\n\n        if (column) {\n          const cell = column.getCell(row[Number(colIndex)])\n          if (cell) {\n            addedRow.set(Number(colIndex), cell)\n          }\n        }\n      })\n      this.addedRows.push(addedRow)\n    })\n\n    // The deleted rows don't need to be transformed\n    this.deletedRows = editingState.deleted_rows\n  }\n\n  /**\n   * Returns true if the given row was added by the user through the UI.\n   */\n  isAddedRow(row: number): boolean {\n    return row >= this.numRows\n  }\n\n  /**\n   * Returns the cell at the given column and row,\n   * in case the cell was edited or added.\n   *\n   * @param col - The column index\n   * @param row - The row index\n   *\n   * @returns The edited cell at the given column and row\n   */\n  getCell(col: number, row: number): GridCell | undefined {\n    if (this.isAddedRow(row)) {\n      // Added rows have their own editing state\n      return this.addedRows[row - this.numRows].get(col)\n    }\n\n    const rowCache = this.editedCells.get(row)\n    if (rowCache === undefined) {\n      return undefined\n    }\n\n    return rowCache.get(col)\n  }\n\n  /**\n   * Adds a cell to the editing state for the given column and row index.\n   *\n   * @param col - The column index\n   * @param row - The row index\n   * @param cell - The cell to add to the editing state\n   */\n  setCell(col: number, row: number, cell: GridCell): void {\n    if (this.isAddedRow(row)) {\n      if (row - this.numRows >= this.addedRows.length) {\n        // Added row does not exist. This is only expected to happen\n        // in relation to a trailing row issue in glide-data-grid.\n        return\n      }\n      // Added rows have their own editing state\n      this.addedRows[row - this.numRows].set(col, cell)\n    } else {\n      if (this.editedCells.get(row) === undefined) {\n        this.editedCells.set(row, new Map())\n      }\n\n      const rowCache = this.editedCells.get(row) as Map<number, GridCell>\n      rowCache.set(col, cell)\n    }\n  }\n\n  /**\n   * Adds a new row to the editing state.\n   *\n   * @param rowCells - The cells of the row to add\n   */\n  addRow(rowCells: Map<number, GridCell>): void {\n    this.addedRows.push(rowCells)\n  }\n\n  /**\n   * Deletes the given rows from the editing state.\n   *\n   * @param rows - The rows to delete\n   */\n  deleteRows(rows: number[]): void {\n    // Delete row one by one starting from the row with the highest index\n    rows\n      .sort((a, b) => b - a)\n      .forEach(row => {\n        this.deleteRow(row)\n      })\n  }\n\n  /**\n   * Deletes the given row from the editing state.\n   *\n   * @param row - The row to delete\n   */\n  deleteRow(row: number): void {\n    if (isNullOrUndefined(row) || row < 0) {\n      // This should never happen\n      return\n    }\n\n    if (this.isAddedRow(row)) {\n      // Remove from added rows:\n      this.addedRows.splice(row - this.numRows, 1)\n      // there is nothing more we have to do\n      return\n    }\n\n    if (!this.deletedRows.includes(row)) {\n      // Add to the set\n      this.deletedRows.push(row)\n      // Sort the deleted rows (important for calculation of the original row index)\n      this.deletedRows = this.deletedRows.sort((a, b) => a - b)\n    }\n\n    // Remove all cells from cell state associated with this row:\n    this.editedCells.delete(row)\n  }\n\n  /**\n   * Returns the original row index of the given row.\n   * Since the user can delete rows, the original row index and the\n   * current one can diverge.\n   *\n   * @param row - The row index from the current state\n   *\n   * @returns The original row index\n   */\n  getOriginalRowIndex(row: number): number {\n    // Just count all deleted rows before this row to determine the original row index:\n    let originalIndex = row\n    for (let i = 0; i < this.deletedRows.length; i++) {\n      if (this.deletedRows[i] > originalIndex) {\n        break\n      }\n      originalIndex += 1\n    }\n    return originalIndex\n  }\n\n  /**\n   * Returns the total number of rows of the current state.\n   */\n  getNumRows(): number {\n    return this.numRows + this.addedRows.length - this.deletedRows.length\n  }\n}\n\nexport default EditingState\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { transparentize } from \"color2k\"\nimport { Theme as GlideTheme } from \"@glideapps/glide-data-grid\"\nimport { useTheme } from \"@emotion/react\"\n\nimport { Theme } from \"src/theme\"\n\n/**\n * Creates a glide-data-grid compatible theme based on our theme configuration.\n *\n * @return a glide-data-grid compatible theme.\n */\nfunction useCustomTheme(): Partial<GlideTheme> & {\n  tableBorderRadius: string\n} {\n  const theme: Theme = useTheme()\n\n  return {\n    // Explanations: https://github.com/glideapps/glide-data-grid/blob/main/packages/core/API.md#theme\n    accentColor: theme.colors.primary,\n    accentFg: theme.colors.white,\n    accentLight: transparentize(theme.colors.primary, 0.9),\n    borderColor: theme.colors.fadedText05,\n    horizontalBorderColor: theme.colors.fadedText05,\n    fontFamily: theme.genericFonts.bodyFont,\n    bgSearchResult: transparentize(theme.colors.primary, 0.9),\n    // Header styling:\n    bgIconHeader: theme.colors.fadedText60,\n    fgIconHeader: theme.colors.white,\n    bgHeader: theme.colors.bgMix,\n    bgHeaderHasFocus: theme.colors.secondaryBg,\n    bgHeaderHovered: theme.colors.bgMix, // uses same color as bgHeader to deactivate the hover effect\n    textHeader: theme.colors.fadedText60,\n    textHeaderSelected: theme.colors.white,\n    textGroupHeader: theme.colors.fadedText60,\n    headerFontStyle: `${theme.fontSizes.sm}`,\n    // Cell styling:\n    baseFontStyle: theme.fontSizes.sm,\n    editorFontSize: theme.fontSizes.sm,\n    textDark: theme.colors.bodyText,\n    textMedium: transparentize(theme.colors.bodyText, 0.2),\n    textLight: theme.colors.fadedText40,\n    textBubble: theme.colors.fadedText60,\n    bgCell: theme.colors.bgColor,\n    bgCellMedium: theme.colors.bgColor, // uses same as bgCell to always have the same background color\n    cellHorizontalPadding: 8,\n    cellVerticalPadding: 3,\n    // Special cells:\n    bgBubble: theme.colors.secondaryBg,\n    bgBubbleSelected: theme.colors.secondaryBg,\n    linkColor: theme.colors.linkText,\n    drilldownBorder: theme.colors.darkenedBgMix25,\n    // Unused settings:\n    // lineHeight\n    // Custom settings\n    tableBorderRadius: theme.radii.md,\n  }\n}\n\nexport default useCustomTheme\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  GridCell,\n  Theme as GlideTheme,\n  TextCell,\n  GridCellKind,\n  LoadingCell,\n  GridColumn,\n} from \"@glideapps/glide-data-grid\"\nimport { toString, merge, isArray } from \"lodash\"\nimport numbro from \"numbro\"\n\nimport { Type as ArrowType } from \"src/lib/Quiver\"\nimport { notNullOrUndefined, isNullOrUndefined } from \"src/lib/utils\"\n\n/**\n * Interface used for defining the properties (configuration options) of a column.\n * These options can also be used to overwrite from user-defined column config.\n */\nexport interface BaseColumnProps {\n  // The id of the column:\n  readonly id: string\n  // The title of the column:\n  readonly title: string\n  // The index number of the column:\n  readonly indexNumber: number\n  // The arrow data type of the column:\n  readonly arrowType: ArrowType\n  // If `True`, the column can be edited:\n  readonly isEditable: boolean\n  // If `True`, the column is hidden (will not be shown):\n  readonly isHidden: boolean\n  // If `True`, the column is a table index:\n  readonly isIndex: boolean\n  // If `True`, the column is a stretched:\n  readonly isStretched: boolean\n  // The initial width of the column:\n  readonly width?: number\n  // Column type selected via column config:\n  readonly customType?: string\n  // Additional metadata related to the column type:\n  readonly columnTypeMetadata?: Record<string, any>\n  // The content alignment of the column:\n  readonly contentAlignment?: \"left\" | \"center\" | \"right\"\n  // Theme overrides for this column:\n  readonly themeOverride?: Partial<GlideTheme>\n}\n\n/**\n * The interface that is implemented by any column type.\n */\nexport interface BaseColumn extends BaseColumnProps {\n  readonly kind: string\n  // Defines the sort mode that should be used for this column type:\n  // default: Sorts by interpreting all values as strings.\n  // smart: Detects if value is a number or a string and sorts accordingly.\n  // raw: Sorts based on the actual type of the cell data value.\n  readonly sortMode: \"default\" | \"raw\" | \"smart\"\n  // Get a cell with the provided data for the column type:\n  getCell(data?: any): GridCell\n  // Get the raw cell of a provided cell:\n  getCellValue(cell: GridCell): any | null\n}\n\n/**\n * A type that describes the function signature used to create a column based on\n * some column properties.\n */\nexport type ColumnCreator = {\n  (props: BaseColumnProps): BaseColumn\n  readonly isEditableType: boolean\n}\n\n// See pydantic for inspiration: https://pydantic-docs.helpmanual.io/usage/types/#booleans\nconst BOOLEAN_TRUE_VALUES = [\"true\", \"t\", \"yes\", \"y\", \"on\", \"1\"]\nconst BOOLEAN_FALSE_VALUES = [\"false\", \"f\", \"no\", \"n\", \"off\", \"0\"]\n\n/**\n * Interface used for indicating if a cell contains an error.\n */\ninterface ErrorCell extends TextCell {\n  readonly isError: true\n}\n\n/**\n * Returns a cell with an error message.\n *\n * @param errorMsg: A short error message to use as display value.\n * @param errorDetails: The full error message to show when the user\n *                     clicks on a cell.\n *\n * @return a read-only GridCell object that can be used by glide-data-grid.\n */\nexport function getErrorCell(errorMsg: string, errorDetails = \"\"): ErrorCell {\n  errorMsg = `⚠️ ${errorMsg}`\n  return {\n    kind: GridCellKind.Text,\n    readonly: true,\n    allowOverlay: true,\n    data: errorMsg + (errorDetails ? `\\n\\n${errorDetails}\\n` : \"\"),\n    displayData: errorMsg,\n    isError: true,\n  } as ErrorCell\n}\n\n/**\n * Returns `true` if the given cell contains an error.\n * This can happen if the value type is not compatible with\n * the given value type.\n */\nexport function isErrorCell(cell: GridCell): cell is ErrorCell {\n  return cell.hasOwnProperty(\"isError\") && (cell as ErrorCell).isError\n}\n\n/**\n * Interface used for indicating if a cell contains no value.\n */\ninterface MissingValueCell extends TextCell {\n  readonly isMissingValue: true\n}\n\n/**\n * Returns `true` if the given cell contains no value (-> missing value).\n * For example, a number cell that contains null is interpreted as a missing value.\n */\nexport function isMissingValueCell(cell: GridCell): cell is MissingValueCell {\n  return (\n    cell.hasOwnProperty(\"isMissingValue\") &&\n    (cell as MissingValueCell).isMissingValue\n  )\n}\n\n/**\n * Returns an empty cell.\n */\nexport function getEmptyCell(): LoadingCell {\n  return {\n    kind: GridCellKind.Loading,\n    allowOverlay: false,\n  } as LoadingCell\n}\n\n/**\n * Returns an empty text cell.\n *\n * @param readonly: If true, returns a read-only version of the cell.\n * @param faded: If true, returns a faded version of the cell.\n *\n * @return a GridCell object that can be used by glide-data-grid.\n */\nexport function getTextCell(readonly: boolean, faded: boolean): TextCell {\n  const style = faded ? \"faded\" : \"normal\"\n  return {\n    kind: GridCellKind.Text,\n    data: \"\",\n    displayData: \"\",\n    allowOverlay: true,\n    readonly,\n    style,\n  } as TextCell\n}\n\n/**\n * Converts from our BaseColumn format to the glide-data-grid compatible GridColumn.\n */\nexport function toGlideColumn(column: BaseColumn): GridColumn {\n  return {\n    id: column.id,\n    title: column.title,\n    hasMenu: false,\n    themeOverride: column.themeOverride,\n    ...(column.isStretched && {\n      grow: column.isIndex ? 1 : 3,\n    }),\n    ...(column.width && {\n      width: column.width,\n    }),\n  } as GridColumn\n}\n\n/**\n * Merges the default column parameters with the user-defined column parameters.\n *\n * @param defaultParams - The default column parameters.\n * @param userParams - The user-defined column parameters.\n *\n * @returns The merged column parameters.\n */\nexport function mergeColumnParameters(\n  defaultParams: Record<string, any> | undefined | null,\n  userParams: Record<string, any> | undefined | null\n): Record<string, any> {\n  if (isNullOrUndefined(defaultParams)) {\n    return userParams || {}\n  }\n\n  if (isNullOrUndefined(userParams)) {\n    return defaultParams || {}\n  }\n\n  return merge(defaultParams, userParams)\n}\n\n/**\n * Converts the given value of unknown type to an array without\n * the risks of any exceptions.\n *\n * @param data - The value to convert to an array.\n *\n * @returns The converted array or an empty array if the value cannot be interpreted as an array.\n */\nexport function toSafeArray(data: any): any[] {\n  if (isNullOrUndefined(data)) {\n    return []\n  }\n\n  if (typeof data === \"number\" || typeof data === \"boolean\") {\n    // Single number or boolean\n    return [data]\n  }\n\n  if (typeof data === \"string\") {\n    if (data === \"\") {\n      // Empty string\n      return []\n    }\n\n    // Try to parse string to an array\n    if (data.trim().startsWith(\"[\") && data.trim().endsWith(\"]\")) {\n      // Support for JSON arrays: [\"foo\", 1, null, \"test\"]\n      try {\n        return JSON.parse(data)\n      } catch (error) {\n        return [data]\n      }\n    } else {\n      // Support for comma-separated values: \"foo,1,,test\"\n      return data.split(\",\")\n    }\n  }\n\n  try {\n    const parsedData = JSON.parse(\n      JSON.stringify(data, (_key, value) =>\n        typeof value === \"bigint\" ? Number(value) : value\n      )\n    )\n    if (!isArray(parsedData)) {\n      return [toSafeString(parsedData)]\n    }\n\n    return parsedData.map((value: any) =>\n      [\"string\", \"number\", \"boolean\", \"null\"].includes(typeof value)\n        ? value\n        : toSafeString(value)\n    )\n  } catch (error) {\n    return [toSafeString(data)]\n  }\n}\n\n/**\n * Converts the given value of unknown type to a string without\n * the risks of any exceptions.\n *\n * @param data - The value to convert to a string.\n *\n * @return The converted string or a string showing the type of the object as fallback.\n */\nexport function toSafeString(data: any): string {\n  try {\n    try {\n      return toString(data)\n    } catch (error) {\n      return JSON.stringify(data, (_key, value) =>\n        typeof value === \"bigint\" ? Number(value) : value\n      )\n    }\n  } catch (error) {\n    // This is most likely an object that cannot be converted to a string\n    // console.log converts this to `[object Object]` which we are doing here as well:\n    return `[${typeof data}]`\n  }\n}\n\n/**\n * Converts the given value of unknown type to a boolean without\n * the risks of any exceptions.\n *\n * @param value - The value to convert to a boolean.\n *\n * @return The converted boolean, null if the value is empty or undefined if the\n *         value cannot be interpreted as a boolean.\n */\nexport function toSafeBoolean(value: any): boolean | null | undefined {\n  if (isNullOrUndefined(value)) {\n    return null\n  }\n\n  if (typeof value === \"boolean\") {\n    return value\n  }\n\n  const cleanedValue = toSafeString(value).toLowerCase().trim()\n  if (cleanedValue === \"\") {\n    return null\n  } else if (BOOLEAN_TRUE_VALUES.includes(cleanedValue)) {\n    return true\n  } else if (BOOLEAN_FALSE_VALUES.includes(cleanedValue)) {\n    return false\n  }\n  // The value cannot be interpreted as boolean\n  return undefined\n}\n\n/**\n * Converts the given value of unknown type to a number without\n * the risks of any exceptions.\n *\n * @param value - The value to convert to a number.\n *\n * @returns The converted number or null if the value is empty or undefined or NaN if the\n *          value cannot be interpreted as a number.\n */\nexport function toSafeNumber(value: any): number | null {\n  // TODO(lukasmasuch): Should this return null as replacement for NaN?\n\n  if (isNullOrUndefined(value)) {\n    return null\n  }\n\n  if (isArray(value)) {\n    return NaN\n  }\n\n  if (typeof value === \"string\") {\n    if (value.trim().length === 0) {\n      // Empty string should return null\n      return null\n    }\n\n    try {\n      // Try to convert string to number via numbro:\n      // https://numbrojs.com/old-format.html#unformat\n      const unformattedValue = numbro.unformat(value.trim())\n      if (notNullOrUndefined(unformattedValue)) {\n        return unformattedValue\n      }\n    } catch (error) {\n      // Do nothing here\n    }\n  } else if (value instanceof Int32Array) {\n    // int values need to be extracted this way:\n    // eslint-disable-next-line prefer-destructuring\n    return Number(value[0])\n  }\n\n  return Number(value)\n}\n\n/**\n * Formats the given number to a string with the given maximum precision.\n *\n * @param value - The number to format.\n * @param maxPrecision - The maximum number of decimals to show.\n * @param keepTrailingZeros - Whether to keep trailing zeros.\n *\n * @returns The formatted number as a string.\n */\nexport function formatNumber(\n  value: number,\n  maxPrecision = 4,\n  keepTrailingZeros = false\n): string {\n  if (!Number.isNaN(value) && Number.isFinite(value)) {\n    if (maxPrecision === 0) {\n      // Numbro is unable to format the numb with 0 decimals.\n      value = Math.round(value)\n    }\n    return numbro(value).format(\n      keepTrailingZeros\n        ? `0,0.${\"0\".repeat(maxPrecision)}`\n        : `0,0.[${\"0\".repeat(maxPrecision)}]`\n    )\n  }\n  return \"\"\n}\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GridCell, TextCell, GridCellKind } from \"@glideapps/glide-data-grid\"\n\nimport { notNullOrUndefined, isNullOrUndefined } from \"src/lib/utils\"\n\nimport {\n  BaseColumn,\n  BaseColumnProps,\n  getErrorCell,\n  ColumnCreator,\n  toSafeString,\n} from \"./utils\"\n\n/**\n * A column type for read-only cells used as a fallback\n * for data types that are currently not supported for editing.\n */\nfunction ObjectColumn(props: BaseColumnProps): BaseColumn {\n  const cellTemplate = {\n    kind: GridCellKind.Text,\n    data: \"\",\n    displayData: \"\",\n    allowOverlay: true,\n    contentAlignment: props.contentAlignment,\n    readonly: true,\n    style: props.isIndex ? \"faded\" : \"normal\",\n  } as TextCell\n  return {\n    ...props,\n    kind: \"object\",\n    sortMode: \"default\",\n    isEditable: false, // Object columns are read-only.\n    getCell(data?: any): GridCell {\n      try {\n        const cellData = notNullOrUndefined(data) ? toSafeString(data) : null\n        const displayData = notNullOrUndefined(cellData) ? cellData : \"\"\n        return {\n          ...cellTemplate,\n          data: cellData,\n          displayData,\n          isMissingValue: isNullOrUndefined(data),\n        } as TextCell\n      } catch (error) {\n        return getErrorCell(\n          toSafeString(data),\n          `The value cannot be interpreted as a string. Error: ${error}`\n        )\n      }\n    },\n    getCellValue(cell: TextCell): string | null {\n      return cell.data === undefined ? null : cell.data\n    },\n  }\n}\n\nObjectColumn.isEditableType = false\n\nexport default ObjectColumn as ColumnCreator\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GridCell, TextCell, GridCellKind } from \"@glideapps/glide-data-grid\"\n\nimport { notNullOrUndefined, isNullOrUndefined } from \"src/lib/utils\"\n\nimport {\n  BaseColumn,\n  BaseColumnProps,\n  getErrorCell,\n  ColumnCreator,\n  toSafeString,\n} from \"./utils\"\n\n/**\n * A column that supports rendering & editing of text values.\n */\nfunction TextColumn(props: BaseColumnProps): BaseColumn {\n  const cellTemplate = {\n    kind: GridCellKind.Text,\n    data: \"\",\n    displayData: \"\",\n    allowOverlay: true,\n    contentAlignment: props.contentAlignment,\n    readonly: !props.isEditable,\n    style: props.isIndex ? \"faded\" : \"normal\",\n  } as TextCell\n\n  return {\n    ...props,\n    kind: \"text\",\n    sortMode: \"default\",\n    getCell(data?: any): GridCell {\n      try {\n        const cellData = notNullOrUndefined(data) ? toSafeString(data) : null\n        const displayData = notNullOrUndefined(cellData) ? cellData : \"\"\n        return {\n          ...cellTemplate,\n          isMissingValue: isNullOrUndefined(cellData),\n          data: cellData,\n          displayData,\n        } as TextCell\n      } catch (error) {\n        // This should never happen, but if it does, we want to show an error\n        return getErrorCell(\n          \"Incompatible value\",\n          `The value cannot be interpreted as string. Error: ${error}`\n        )\n      }\n    },\n    getCellValue(cell: TextCell): string | null {\n      return cell.data === undefined ? null : cell.data\n    },\n  }\n}\n\nTextColumn.isEditableType = true\n\nexport default TextColumn as ColumnCreator\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  GridCell,\n  BooleanCell,\n  GridCellKind,\n} from \"@glideapps/glide-data-grid\"\n\nimport {\n  BaseColumn,\n  BaseColumnProps,\n  getErrorCell,\n  ColumnCreator,\n  toSafeString,\n  toSafeBoolean,\n} from \"./utils\"\n\n/**\n * A column type that supports optimized rendering and editing for boolean values\n * by using checkboxes.\n */\nfunction BooleanColumn(props: BaseColumnProps): BaseColumn {\n  const cellTemplate = {\n    kind: GridCellKind.Boolean,\n    data: false,\n    allowOverlay: false, // no overlay possible\n    contentAlign: props.contentAlignment,\n    readonly: !props.isEditable,\n    style: props.isIndex ? \"faded\" : \"normal\",\n  } as BooleanCell\n\n  return {\n    ...props,\n    kind: \"boolean\",\n    sortMode: \"default\",\n    getCell(data?: any): GridCell {\n      let cellData = null\n\n      cellData = toSafeBoolean(data)\n      if (cellData === undefined) {\n        return getErrorCell(\n          toSafeString(data),\n          `The value cannot be interpreted as boolean.`\n        )\n      }\n\n      // We are not setting isMissingValue here because the checkbox column\n      // does not work with the missing cell rendering.\n      return {\n        ...cellTemplate,\n        data: cellData,\n      } as BooleanCell\n    },\n    getCellValue(cell: BooleanCell): boolean | null {\n      return cell.data === undefined ? null : cell.data\n    },\n  }\n}\n\nBooleanColumn.isEditableType = true\n\nexport default BooleanColumn as ColumnCreator\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GridCell, GridCellKind } from \"@glideapps/glide-data-grid\"\nimport { DropdownCellType } from \"@glideapps/glide-data-grid-cells\"\n\nimport { Quiver } from \"src/lib/Quiver\"\nimport { notNullOrUndefined } from \"src/lib/utils\"\n\nimport {\n  BaseColumn,\n  BaseColumnProps,\n  ColumnCreator,\n  getErrorCell,\n  toSafeString,\n  mergeColumnParameters,\n  toSafeNumber,\n  toSafeBoolean,\n} from \"./utils\"\n\nexport interface CategoricalColumnParams {\n  /** A list of options available in the dropdown.\n   * Every value in the column needs to match one of the options.\n   */\n  readonly options: (string | number | boolean)[]\n}\n\n/**\n * A column type that supports optimized rendering and editing for categorical values\n * by using a dropdown. This is automatically used by categorical columns (Pandas).\n *\n */\nfunction CategoricalColumn(props: BaseColumnProps): BaseColumn {\n  // Categorical column can be either string, number or boolean type based on the options\n  let dataType: \"number\" | \"boolean\" | \"string\" = \"string\"\n\n  const parameters = mergeColumnParameters(\n    // Default parameters:\n    {\n      options:\n        Quiver.getTypeName(props.arrowType) === \"bool\" ? [true, false] : [],\n    },\n    // User parameters:\n    props.columnTypeMetadata\n  ) as CategoricalColumnParams\n\n  const uniqueTypes = new Set(parameters.options.map(x => typeof x))\n  if (uniqueTypes.size === 1) {\n    if (uniqueTypes.has(\"number\") || uniqueTypes.has(\"bigint\")) {\n      dataType = \"number\"\n    } else if (uniqueTypes.has(\"boolean\")) {\n      dataType = \"boolean\"\n    }\n  }\n\n  const cellTemplate = {\n    kind: GridCellKind.Custom,\n    allowOverlay: props.isEditable,\n    copyData: \"\",\n    contentAlign: props.contentAlignment,\n    readonly: !props.isEditable,\n    data: {\n      kind: \"dropdown-cell\",\n      allowedValues: [\n        \"\", // Enforce the empty option\n        ...parameters.options\n          .filter(opt => opt !== \"\") // ignore empty option if it exists\n          .map(opt => toSafeString(opt)), // convert everything to string\n      ],\n      value: \"\",\n      readonly: !props.isEditable,\n    },\n  } as DropdownCellType\n\n  return {\n    ...props,\n    kind: \"categorical\",\n    sortMode: \"default\",\n    getCell(data?: any): GridCell {\n      // Empty string refers to a missing value\n      let cellData = \"\"\n      if (notNullOrUndefined(data)) {\n        cellData = toSafeString(data)\n      }\n\n      if (!cellTemplate.data.allowedValues.includes(cellData)) {\n        return getErrorCell(\n          toSafeString(cellData),\n          `The value is not part of the allowed options.`\n        )\n      }\n      return {\n        ...cellTemplate,\n        isMissingValue: cellData === \"\",\n        copyData: cellData, // Column sorting is done via the copyData value\n        data: {\n          ...cellTemplate.data,\n          value: cellData,\n        },\n      } as DropdownCellType\n    },\n    getCellValue(cell: DropdownCellType): string | number | boolean | null {\n      if (cell.data?.value === undefined || cell.data?.value === \"\") {\n        return null\n      }\n      if (dataType === \"number\") {\n        return toSafeNumber(cell.data?.value) ?? null\n      } else if (dataType === \"boolean\") {\n        return toSafeBoolean(cell.data?.value) ?? null\n      }\n      return cell.data?.value\n    },\n  }\n}\n\nCategoricalColumn.isEditableType = true\n\nexport default CategoricalColumn as ColumnCreator\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GridCell, BubbleCell, GridCellKind } from \"@glideapps/glide-data-grid\"\n\nimport { isNullOrUndefined } from \"src/lib/utils\"\n\nimport {\n  BaseColumn,\n  BaseColumnProps,\n  ColumnCreator,\n  toSafeArray,\n} from \"./utils\"\n\n/**\n * A column type that supports optimized rendering values of array/list types.\n */\nfunction ListColumn(props: BaseColumnProps): BaseColumn {\n  const cellTemplate = {\n    kind: GridCellKind.Bubble,\n    data: [],\n    allowOverlay: true,\n    contentAlign: props.contentAlignment,\n    style: props.isIndex ? \"faded\" : \"normal\",\n  } as BubbleCell\n\n  return {\n    ...props,\n    kind: \"list\",\n    sortMode: \"default\",\n    isEditable: false, // List column is always readonly\n    getCell(data?: any): GridCell {\n      // TODO(lukasmasuch): if notNullOrUndefined -> use empty cell to return null value\n      return {\n        ...cellTemplate,\n        data: toSafeArray(data),\n        isMissingValue: isNullOrUndefined(data),\n      } as BubbleCell\n    },\n    getCellValue(cell: BubbleCell): string[] | null {\n      return cell.data === undefined ? null : cell.data\n    },\n  }\n}\n\nListColumn.isEditableType = false\n\nexport default ListColumn as ColumnCreator\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GridCell, GridCellKind, NumberCell } from \"@glideapps/glide-data-grid\"\n\nimport { Quiver } from \"src/lib/Quiver\"\nimport { notNullOrUndefined, isNullOrUndefined } from \"src/lib/utils\"\n\nimport {\n  BaseColumn,\n  BaseColumnProps,\n  getErrorCell,\n  ColumnCreator,\n  toSafeString,\n  mergeColumnParameters,\n  toSafeNumber,\n  formatNumber,\n} from \"./utils\"\n\nexport interface NumberColumnParams {\n  // Floating point precision to limit the number of digits after the decimal point.\n  // This is set to 0 for integer columns.\n  readonly precision?: number\n  // The minimum allowed value for editing. Is set to 0 for unsigned values.\n  readonly min?: number\n  // The maximum allowed value for editing.\n  readonly max?: number\n}\n\n/**\n * A column types that supports optimized rendering and editing for numbers.\n * This supports float, integer, and unsigned integer types.\n */\nfunction NumberColumn(props: BaseColumnProps): BaseColumn {\n  const arrowTypeName = Quiver.getTypeName(props.arrowType)\n\n  const parameters = mergeColumnParameters(\n    // Default parameters:\n    {\n      precision:\n        arrowTypeName.startsWith(\"int\") ||\n        arrowTypeName === \"range\" ||\n        arrowTypeName.startsWith(\"uint\")\n          ? 0\n          : undefined,\n      // if uint (unsigned int), only positive numbers are allowed\n      min: arrowTypeName.startsWith(\"uint\") ? 0 : undefined,\n    },\n    // User parameters:\n    props.columnTypeMetadata\n  ) as NumberColumnParams\n\n  const allowNegative = isNullOrUndefined(parameters.min) || parameters.min < 0\n  const fixedDecimals = notNullOrUndefined(parameters.precision)\n    ? parameters.precision\n    : undefined\n\n  const cellTemplate = {\n    kind: GridCellKind.Number,\n    data: undefined,\n    displayData: \"\",\n    readonly: !props.isEditable,\n    allowOverlay: true,\n    contentAlign: props.contentAlignment || \"right\",\n    style: props.isIndex ? \"faded\" : \"normal\",\n    allowNegative,\n    fixedDecimals,\n  } as NumberCell\n\n  return {\n    ...props,\n    kind: \"number\",\n    sortMode: \"smart\",\n    getCell(data?: any): GridCell {\n      let cellData: number | null = toSafeNumber(data)\n\n      if (notNullOrUndefined(cellData)) {\n        if (Number.isNaN(cellData)) {\n          return getErrorCell(\n            toSafeString(data),\n            \"The value cannot be interpreted as a number.\"\n          )\n        }\n\n        // Apply precision parameter\n        if (notNullOrUndefined(parameters.precision)) {\n          cellData =\n            parameters.precision === 0\n              ? Math.trunc(cellData)\n              : Math.trunc(cellData * 10 ** parameters.precision) /\n                10 ** parameters.precision\n        }\n\n        // Apply min parameter\n        if (notNullOrUndefined(parameters.min)) {\n          cellData = Math.max(cellData, parameters.min)\n        }\n\n        // Apply max parameter\n        if (notNullOrUndefined(parameters.max)) {\n          cellData = Math.min(cellData, parameters.max)\n        }\n      }\n\n      return {\n        ...cellTemplate,\n        data: cellData,\n        displayData: notNullOrUndefined(cellData)\n          ? formatNumber(cellData)\n          : \"\",\n        isMissingValue: isNullOrUndefined(cellData),\n      } as NumberCell\n    },\n    getCellValue(cell: NumberCell): number | null {\n      return cell.data === undefined ? null : cell.data\n    },\n  }\n}\n\nNumberColumn.isEditableType = true\n\nexport default NumberColumn as ColumnCreator\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ObjectColumn from \"./ObjectColumn\"\nimport TextColumn from \"./TextColumn\"\nimport BooleanColumn from \"./BooleanColumn\"\nimport CategoricalColumn from \"./CategoricalColumn\"\nimport ListColumn from \"./ListColumn\"\nimport NumberColumn from \"./NumberColumn\"\n\nimport { ColumnCreator } from \"./utils\"\n\nexport * from \"./utils\"\n\n/**\n * All available column types need to be registered here.\n */\nexport const ColumnTypes = new Map<string, ColumnCreator>(\n  Object.entries({\n    object: ObjectColumn,\n    text: TextColumn,\n    boolean: BooleanColumn,\n    categorical: CategoricalColumn,\n    list: ListColumn,\n    number: NumberColumn,\n  })\n)\n\nexport {\n  ObjectColumn,\n  TextColumn,\n  BooleanColumn,\n  CategoricalColumn,\n  ListColumn,\n  NumberColumn,\n}\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  GridCell,\n  Theme as GlideTheme,\n  TextCell,\n  NumberCell,\n  GridCellKind,\n} from \"@glideapps/glide-data-grid\"\n\nimport { DataFrameCell, Quiver, Type as ArrowType } from \"src/lib/Quiver\"\nimport { notNullOrUndefined, isNullOrUndefined } from \"src/lib/utils\"\n\nimport {\n  BaseColumn,\n  BaseColumnProps,\n  ColumnCreator,\n  ObjectColumn,\n  BooleanColumn,\n  NumberColumn,\n  TextColumn,\n  CategoricalColumn,\n  ListColumn,\n  isErrorCell,\n} from \"./columns\"\n\n/**\n * Extracts a CSS property value from a given CSS style string by using a regex.\n *\n * @param htmlElementId - The ID of the HTML element to extract the property for.\n * @param property - The css property to extract the value for.\n * @param cssStyle - The css style string.\n *\n * @return the CSS property value or undefined if the property is not found.\n */\nexport function extractCssProperty(\n  htmlElementId: string,\n  property: string,\n  cssStyle: string\n): string | undefined {\n  // This regex is supposed to extract the value of a CSS property\n  // for a specified HTML element ID from a CSS style string:\n  const regex = new RegExp(\n    `${htmlElementId}[,\\\\s].*{(?:[^}]*[\\\\s;]{1})?${property}:\\\\s*([^;}]+)[;]?.*}`,\n    \"gm\"\n  )\n  // Makes the regex simpler to match the element correctly:\n  cssStyle = cssStyle.replace(/{/g, \" {\")\n\n  const match = regex.exec(cssStyle)\n  if (match) {\n    return match[1].trim()\n  }\n\n  return undefined\n}\n\nexport function processDisplayData(displayData: string): string {\n  // Remove all line breaks\n  return displayData.replace(/(\\r\\n|\\n|\\r)/gm, \" \")\n}\n\n/**\n * Applies pandas styler CSS to style the cell.\n *\n * @param cell: The cell to style.\n * @param cssId: The css ID of the cell.\n * @param cssStyles: All CSS styles from pandas styler.\n *\n * @return a styled grid cell.\n */\nexport function applyPandasStylerCss(\n  cell: GridCell,\n  cssId: string,\n  cssStyles: string\n): GridCell {\n  const themeOverride = {} as Partial<GlideTheme>\n\n  // Extract and apply the font color\n  const fontColor = extractCssProperty(cssId, \"color\", cssStyles)\n  if (fontColor) {\n    themeOverride.textDark = fontColor\n  }\n\n  // Extract and apply the background color\n  const backgroundColor = extractCssProperty(\n    cssId,\n    \"background-color\",\n    cssStyles\n  )\n  if (backgroundColor) {\n    themeOverride.bgCell = backgroundColor\n  }\n\n  if (backgroundColor === \"yellow\" && fontColor === undefined) {\n    // Yellow is used by pandas styler as the default highlight color.\n    // But yellow won't work well with our default font color in dark mode.\n    // Therefore, we are overriding the font color to our dark font color which\n    // always works well with yellow background.\n    themeOverride.textDark = \"#31333F\"\n  }\n\n  if (themeOverride) {\n    // Apply the background and font color in the theme override\n    return {\n      ...cell,\n      themeOverride,\n    }\n  }\n  return cell\n}\n\n/**\n * Maps the data type from Arrow to a column type.\n */\nexport function getColumnTypeFromArrow(arrowType: ArrowType): ColumnCreator {\n  let typeName = arrowType ? Quiver.getTypeName(arrowType) : null\n\n  if (!typeName) {\n    // Use object column as fallback\n    return ObjectColumn\n  }\n\n  typeName = typeName.toLowerCase().trim()\n  // Match based on arrow types\n  if ([\"unicode\", \"empty\"].includes(typeName)) {\n    return TextColumn\n  }\n  if (\n    [\n      \"object\",\n      \"date\",\n      \"time\",\n      \"datetime\",\n      \"datetimetz\",\n      \"decimal\",\n      \"bytes\",\n    ].includes(typeName)\n  ) {\n    return ObjectColumn\n  }\n  if ([\"bool\"].includes(typeName)) {\n    return BooleanColumn\n  }\n  if (\n    [\n      \"int8\",\n      \"int16\",\n      \"int32\",\n      \"int64\",\n      \"uint8\",\n      \"uint16\",\n      \"uint32\",\n      \"uint64\",\n      \"float16\",\n      \"float32\",\n      \"float64\",\n      \"float96\",\n      \"float128\",\n      \"range\", // The default index in pandas uses a range type.\n    ].includes(typeName)\n  ) {\n    return NumberColumn\n  }\n  if (typeName === \"categorical\") {\n    return CategoricalColumn\n  }\n  if (typeName.startsWith(\"list\")) {\n    return ListColumn\n  }\n\n  return ObjectColumn\n}\n\n/**\n * Creates the column props for an index column from the Arrow metadata.\n *\n * @param data - The Arrow data.\n * @param indexPosition - The numeric position of the index column.\n *\n * @return the column props for the index column.\n */\nexport function getIndexFromArrow(\n  data: Quiver,\n  indexPosition: number\n): BaseColumnProps {\n  const arrowType = data.types.index[indexPosition]\n  const title = data.indexNames[indexPosition]\n  let isEditable = true\n\n  if (Quiver.getTypeName(arrowType) === \"range\") {\n    // Range indices are not editable\n    isEditable = false\n  }\n\n  return {\n    id: `index-${indexPosition}`,\n    isEditable,\n    title,\n    arrowType,\n    isIndex: true,\n    isHidden: false,\n  } as BaseColumnProps\n}\n\n/**\n * Creates the column props for a data column from the Arrow metadata.\n *\n * @param data - The Arrow data.\n * @param columnPosition - The numeric position of the data column.\n *\n * @return the column props for the data column.\n */\nexport function getColumnFromArrow(\n  data: Quiver,\n  columnPosition: number\n): BaseColumnProps {\n  const title = data.columns[0][columnPosition]\n  let arrowType = data.types.data[columnPosition]\n\n  if (isNullOrUndefined(arrowType)) {\n    // Use empty column type as fallback\n    arrowType = {\n      meta: null,\n      numpy_type: \"object\",\n      pandas_type: \"object\",\n    } as ArrowType\n  }\n\n  let columnTypeMetadata\n  if (Quiver.getTypeName(arrowType) === \"categorical\") {\n    // Get the available categories and use it in column type metadata\n    const options = data.getCategoricalOptions(columnPosition)\n    if (notNullOrUndefined(options)) {\n      columnTypeMetadata = {\n        options,\n      }\n    }\n  }\n\n  return {\n    id: `column-${title}-${columnPosition}`,\n    isEditable: true,\n    title,\n    arrowType,\n    columnTypeMetadata,\n    isIndex: false,\n    isHidden: false,\n  } as BaseColumnProps\n}\n\n/**\n * Creates the column props for an empty index column.\n * This is used for DataFrames that don't have any index.\n * At least one column is required for glide.\n */\nexport function getEmptyIndexColumn(): BaseColumnProps {\n  return {\n    id: `empty-index`,\n    title: \"\",\n    indexNumber: 0,\n    isEditable: false,\n    isIndex: true,\n  } as BaseColumnProps\n}\n\n/**\n * Creates the column props for all columns from the Arrow metadata.\n *\n * @param data - The Arrow data.\n * @return the column props for all columns.\n */\nexport function getAllColumnsFromArrow(data: Quiver): BaseColumnProps[] {\n  const columns: BaseColumnProps[] = []\n\n  // TODO(lukasmasuch): use data.dimensions instead here?\n  const numIndices = data.types?.index?.length ?? 0\n  const numColumns = data.columns?.[0]?.length ?? 0\n\n  if (numIndices === 0 && numColumns === 0) {\n    // Tables that don't have any columns cause an exception in glide-data-grid.\n    // As a workaround, we are adding an empty index column in this case.\n    columns.push(getEmptyIndexColumn())\n    return columns\n  }\n\n  for (let i = 0; i < numIndices; i++) {\n    const column = {\n      ...getIndexFromArrow(data, i),\n      indexNumber: i,\n    } as BaseColumnProps\n\n    columns.push(column)\n  }\n\n  for (let i = 0; i < numColumns; i++) {\n    const column = {\n      ...getColumnFromArrow(data, i),\n      indexNumber: i + numIndices,\n    } as BaseColumnProps\n\n    columns.push(column)\n  }\n  return columns\n}\n\n/**\n * Returns a glide-data-grid compatible cell object based on the\n * cell data from the Quiver (Arrow) object. Different types of data will\n * result in different cell types.\n *\n * @param column - The colum of the cell.\n * @param arrowCell - The dataframe cell object from Arrow.\n * @param cssStyles - Optional css styles to apply on the cell.\n *\n * @return a GridCell object that can be used by glide-data-grid.\n */\nexport function getCellFromArrow(\n  column: BaseColumn,\n  arrowCell: DataFrameCell,\n  cssStyles: string | undefined = undefined\n): GridCell {\n  let cellTemplate\n  if (column.kind === \"object\") {\n    // Always use display value from Quiver for object types\n    // these are special types that the dataframe only support in read-only mode.\n    cellTemplate = column.getCell(\n      notNullOrUndefined(arrowCell.content)\n        ? processDisplayData(\n            Quiver.format(\n              arrowCell.content,\n              arrowCell.contentType,\n              arrowCell.field\n            )\n          )\n        : null\n    )\n  } else {\n    cellTemplate = column.getCell(arrowCell.content)\n  }\n\n  if (isErrorCell(cellTemplate)) {\n    // Directly return error cells without any additional modification\n    return cellTemplate\n  }\n\n  if (!column.isEditable) {\n    // Only apply display content and css styles to non-editable cells.\n    if (notNullOrUndefined(arrowCell.displayContent)) {\n      const displayData = processDisplayData(arrowCell.displayContent)\n      // If the display content is set, use that instead of the content.\n      // This is only supported for text, object, date, datetime, time and number cells.\n      if (cellTemplate.kind === GridCellKind.Text) {\n        cellTemplate = {\n          ...cellTemplate,\n          displayData,\n        } as TextCell\n      } else if (cellTemplate.kind === GridCellKind.Number) {\n        cellTemplate = {\n          ...cellTemplate,\n          displayData,\n        } as NumberCell\n      }\n      // TODO (lukasmasuch): Also support datetime formatting here\n    }\n\n    if (cssStyles && arrowCell.cssId) {\n      cellTemplate = applyPandasStylerCss(\n        cellTemplate,\n        arrowCell.cssId,\n        cssStyles\n      )\n    }\n  }\n  return cellTemplate\n}\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\"\n\nimport { GridCell, DataEditorProps } from \"@glideapps/glide-data-grid\"\n\nimport { Quiver } from \"src/lib/Quiver\"\nimport { logError } from \"src/lib/log\"\n\nimport { getCellFromArrow } from \"src/components/widgets/DataFrame/arrowUtils\"\nimport EditingState from \"src/components/widgets/DataFrame/EditingState\"\nimport {\n  BaseColumn,\n  getErrorCell,\n} from \"src/components/widgets/DataFrame/columns\"\n\ntype DataLoaderReturn = Pick<DataEditorProps, \"getCellContent\">\n\n/**\n * Custom hook that handles all data loading capabilities for the interactive data table.\n * This also includes the logic to load and configure columns.\n *\n * @param data - The Arrow data extracted from the proto message\n * @param numRows - The number of rows of the current state (includes row additions/deletions)\n * @param editingState - The editing state of the data editor\n *\n * @returns the columns and the cell content getter compatible with glide-data-grid.\n */\nfunction useDataLoader(\n  data: Quiver,\n  columns: BaseColumn[],\n  numRows: number,\n  editingState: React.MutableRefObject<EditingState>\n): DataLoaderReturn {\n  const getCellContent = React.useCallback(\n    ([col, row]: readonly [number, number]): GridCell => {\n      if (col > columns.length - 1) {\n        return getErrorCell(\n          \"Column index out of bounds.\",\n          \"This should never happen. Please report this bug.\"\n        )\n      }\n\n      if (row > numRows - 1) {\n        return getErrorCell(\n          \"Row index out of bounds.\",\n          \"This should never happen. Please report this bug.\"\n        )\n      }\n      const column = columns[col]\n\n      const originalCol = column.indexNumber\n      const originalRow = editingState.current.getOriginalRowIndex(row)\n\n      // Use editing state if editable or if it is an appended row\n      if (column.isEditable || editingState.current.isAddedRow(originalRow)) {\n        const editedCell = editingState.current.getCell(\n          originalCol,\n          originalRow\n        )\n        if (editedCell !== undefined) {\n          return editedCell\n        }\n      }\n\n      try {\n        // Arrow has the header in first row\n        const arrowCell = data.getCell(originalRow + 1, originalCol)\n        return getCellFromArrow(column, arrowCell, data.cssStyles)\n      } catch (error) {\n        logError(error)\n        return getErrorCell(\n          \"Error during cell creation.\",\n          `This should never happen. Please report this bug. \\nError: ${error}`\n        )\n      }\n    },\n    [columns, numRows, data, editingState]\n  )\n\n  return {\n    getCellContent,\n  }\n}\n\nexport default useDataLoader\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\"\n\nimport { Size as ResizableSize } from \"re-resizable\"\n\nimport { Arrow as ArrowProto } from \"src/autogen/proto\"\nimport { notNullOrUndefined } from \"src/lib/utils\"\n\nconst ROW_HEIGHT = 35\n// Min width for the resizable table container:\n// Based on one column at minimum width + 2 for borders + 1 to prevent overlap problem with selection ring.\nconst MIN_TABLE_WIDTH = 52\n// Min height for the resizable table container:\n// Based on header + one column, and + 2 for borders + 1 to prevent overlap problem with selection ring.\nconst MIN_TABLE_HEIGHT = 2 * ROW_HEIGHT + 3\nconst DEFAULT_TABLE_HEIGHT = 400\n\nexport type AutoSizerReturn = {\n  rowHeight: number\n  minHeight: number\n  maxHeight: number\n  minWidth: number\n  maxWidth: number\n  resizableSize: ResizableSize\n  setResizableSize: React.Dispatch<React.SetStateAction<ResizableSize>>\n}\n\nexport function calculateMaxHeight(numRows: number): number {\n  // +2 pixels for borders\n  return Math.max(numRows * ROW_HEIGHT + 1 + 2, MIN_TABLE_HEIGHT)\n}\n/**\n * A custom React hook that manages all aspects related to the size of the table.\n *\n * @param element - The ArrowProto element\n * @param numRows - The number of rows in the table\n * @param containerWidth - The width of the surrounding container\n * @param containerHeight - The height of the surrounding container\n * @param isFullScreen - Whether the table is in fullscreen mode\n *\n * @returns The row height, min/max height & width, and the current size of the resizable container.\n */\nfunction useTableSizer(\n  element: ArrowProto,\n  numRows: number,\n  containerWidth: number,\n  containerHeight?: number,\n  isFullScreen?: boolean\n): AutoSizerReturn {\n  let maxHeight = calculateMaxHeight(\n    numRows +\n      1 + // Column header row\n      (element.editingMode === ArrowProto.EditingMode.DYNAMIC ? 1 : 0) // Trailing row\n  )\n\n  let initialHeight = Math.min(maxHeight, DEFAULT_TABLE_HEIGHT)\n\n  if (element.height) {\n    // User has explicitly configured a height\n    initialHeight = Math.max(element.height, MIN_TABLE_HEIGHT)\n    maxHeight = Math.max(element.height, maxHeight)\n  }\n\n  if (containerHeight) {\n    // If container height is set (e.g. when used in fullscreen)\n    // The maxHeight and height should not be larger than container height\n    initialHeight = Math.min(initialHeight, containerHeight)\n    maxHeight = Math.min(maxHeight, containerHeight)\n\n    if (!element.height) {\n      // If no explicit height is set, set height to max height (fullscreen mode)\n      initialHeight = maxHeight\n    }\n  }\n\n  let initialWidth: number | undefined // If container width is undefined, auto set based on column widths\n  let maxWidth = containerWidth\n\n  if (element.useContainerWidth) {\n    // Always use the full container width\n    initialWidth = containerWidth\n  } else if (element.width) {\n    // User has explicitly configured a width\n    initialWidth = Math.min(\n      Math.max(element.width, MIN_TABLE_WIDTH),\n      containerWidth\n    )\n    maxWidth = Math.min(Math.max(element.width, maxWidth), containerWidth)\n  }\n\n  const [resizableSize, setResizableSize] = React.useState<ResizableSize>({\n    width: initialWidth || \"100%\",\n    height: initialHeight,\n  })\n\n  React.useLayoutEffect(() => {\n    // This prevents weird table resizing behavior if the container width\n    // changes and the table uses the full container width.\n    if (element.useContainerWidth && resizableSize.width === \"100%\") {\n      setResizableSize({\n        width: containerWidth,\n        height: resizableSize.height,\n      })\n    }\n  }, [containerWidth])\n\n  // Reset the height if the number of rows changes (e.g. via add_rows):\n  React.useLayoutEffect(() => {\n    setResizableSize({\n      width: resizableSize.width,\n      height: initialHeight,\n    })\n  }, [numRows])\n\n  // Reset the width if the element width parameter was changed:\n  React.useLayoutEffect(() => {\n    setResizableSize({\n      width: initialWidth || \"100%\",\n      height: resizableSize.height,\n    })\n  }, [initialWidth])\n\n  // Reset the height if the element height parameter was changed:\n  React.useLayoutEffect(() => {\n    setResizableSize({\n      width: resizableSize.width,\n      height: initialHeight,\n    })\n  }, [initialHeight])\n\n  // Change sizing if the fullscreen mode is activated or deactivated:\n  React.useLayoutEffect(() => {\n    if (isFullScreen) {\n      const stretchColumns: boolean =\n        element.useContainerWidth ||\n        (notNullOrUndefined(element.width) && element.width > 0)\n      setResizableSize({\n        width: stretchColumns ? maxWidth : \"100%\",\n        height: maxHeight,\n      })\n    } else {\n      setResizableSize({\n        width: initialWidth || \"100%\",\n        height: initialHeight,\n      })\n    }\n  }, [isFullScreen])\n\n  return {\n    rowHeight: ROW_HEIGHT,\n    minHeight: MIN_TABLE_HEIGHT,\n    maxHeight,\n    minWidth: MIN_TABLE_WIDTH,\n    maxWidth,\n    resizableSize,\n    setResizableSize,\n  }\n}\n\nexport default useTableSizer\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\"\nimport {\n  EditableGridCell,\n  GridCell,\n  DataEditorProps,\n  GridSelection,\n  Item,\n} from \"@glideapps/glide-data-grid\"\n\nimport {\n  BaseColumn,\n  isErrorCell,\n} from \"src/components/widgets/DataFrame/columns\"\nimport EditingState from \"src/components/widgets/DataFrame/EditingState\"\n\n/**\n * Create return type for useDataLoader hook based on the DataEditorProps.\n */\ntype DataEditorReturn = Pick<\n  DataEditorProps,\n  \"onCellEdited\" | \"onPaste\" | \"onRowAppended\" | \"onDelete\"\n>\n\n/**\n * Custom hook to handle all aspects related to data editing. This includes editing cells,\n * pasting from clipboard, and appending & deleting rows.\n *\n * @param columns - The columns of the table.\n * @param fixedNumRows - Whether the number of rows is fixed. This means that rows cannot be added or deleted.\n * @param editingState - The editing state of the data editor.\n * @param getCellContent - Function to get a specific cell.\n * @param getOriginalIndex - Function to map a row ID of the current state to the original row ID.\n *                           This mainly changed by sorting of columns.\n * @param refreshCells - Callback that allows to trigger a UI refresh of a selection of cells.\n * @param applyEdits - Callback that needs to be called on all edits. This will also trigger a rerun\n *                     and send widget state to the backend.\n *\n * @returns Glide-data-grid compatible functions for editing capabilities.\n */\nfunction useDataEditor(\n  columns: BaseColumn[],\n  fixedNumRows: boolean,\n  editingState: React.MutableRefObject<EditingState>,\n  getCellContent: ([col, row]: readonly [number, number]) => GridCell,\n  getOriginalIndex: (index: number) => number,\n  refreshCells: (\n    cells: {\n      cell: [number, number]\n    }[]\n  ) => void,\n  applyEdits: (clearSelection?: boolean, triggerRerun?: boolean) => void\n): DataEditorReturn {\n  const onCellEdited = React.useCallback(\n    (\n      [col, row]: readonly [number, number],\n      updatedCell: EditableGridCell\n    ): void => {\n      const column = columns[col]\n\n      const originalCol = column.indexNumber\n\n      // We need to apply two different mappings here. One for the case that\n      // the user has sorted a column, and another one from the editing state\n      // to get the correct row ID when the user has deleted rows.\n      const originalRow = editingState.current.getOriginalRowIndex(\n        getOriginalIndex(row)\n      )\n      const currentCell = getCellContent([col, row])\n      const currentValue = column.getCellValue(currentCell)\n      const newValue = column.getCellValue(updatedCell)\n      if (!isErrorCell(currentCell) && newValue === currentValue) {\n        // No editing is required since the values did not change\n        return\n      }\n\n      const newCell = column.getCell(newValue)\n\n      editingState.current.setCell(originalCol, originalRow, {\n        ...newCell,\n        lastUpdated: performance.now(),\n      })\n\n      applyEdits()\n    },\n    [columns, editingState, getOriginalIndex, getCellContent, applyEdits]\n  )\n\n  const onRowAppended = React.useCallback(() => {\n    if (fixedNumRows) {\n      // Appending rows is not supported\n      return\n    }\n\n    const newRow: Map<number, GridCell> = new Map()\n    columns.forEach(column => {\n      newRow.set(column.indexNumber, column.getCell(undefined))\n    })\n    editingState.current.addRow(newRow)\n    applyEdits(false, false)\n  }, [columns, editingState, fixedNumRows])\n\n  const onDelete = React.useCallback(\n    (selection: GridSelection): GridSelection | boolean => {\n      if (selection.rows.length > 0) {\n        // User has selected one or more rows\n        if (fixedNumRows) {\n          // Deleting rows is not supported\n          return true\n        }\n\n        const rowsToDelete = selection.rows.toArray().map(row => {\n          return editingState.current.getOriginalRowIndex(\n            getOriginalIndex(row)\n          )\n        })\n        // We need to delete all rows at once, so that the indexes work correct\n        editingState.current.deleteRows(rowsToDelete)\n        applyEdits(true)\n        return false\n      }\n      if (selection.current?.range) {\n        // User has selected one or more cells\n        const updatedCells: { cell: [number, number] }[] = []\n        const selectedArea = selection.current.range\n        for (\n          let row = selectedArea.y;\n          row < selectedArea.y + selectedArea.height;\n          row++\n        ) {\n          for (\n            let col = selectedArea.x;\n            col < selectedArea.x + selectedArea.width;\n            col++\n          ) {\n            const column = columns[col]\n            if (column.isEditable) {\n              updatedCells.push({\n                cell: [col, row],\n              })\n              onCellEdited(\n                [col, row],\n                column.getCell(null) as EditableGridCell\n              )\n            }\n          }\n        }\n\n        if (updatedCells.length > 0) {\n          applyEdits()\n          refreshCells(updatedCells)\n        }\n        return false\n      }\n      return true\n    },\n    [\n      columns,\n      editingState,\n      fixedNumRows,\n      refreshCells,\n      getOriginalIndex,\n      applyEdits,\n    ]\n  )\n\n  const onPaste = React.useCallback(\n    (target: Item, values: readonly (readonly string[])[]): boolean => {\n      const [targetCol, targetRow] = target\n\n      const updatedCells: { cell: [number, number] }[] = []\n\n      for (let row = 0; row < values.length; row++) {\n        const rowData = values[row]\n        if (row + targetRow >= editingState.current.getNumRows()) {\n          if (fixedNumRows) {\n            // Only add new rows if editing mode is dynamic, otherwise break here\n            break\n          }\n          // Adding rows during paste would not work currently. However, we already disallow\n          // sorting in dynamic mode, so we don't have to do anything here.\n          onRowAppended()\n        }\n        for (let col = 0; col < rowData.length; col++) {\n          const pasteDataValue = rowData[col]\n\n          const rowIndex = row + targetRow\n          const colIndex = col + targetCol\n\n          if (colIndex >= columns.length) {\n            // We could potentially add new columns here in the future.\n            break\n          }\n\n          const column = columns[colIndex]\n          // Only add to columns that are editable:\n          if (column.isEditable) {\n            const newCell = column.getCell(pasteDataValue)\n            // We are not editing cells if the pasted value leads to an error:\n            if (!isErrorCell(newCell)) {\n              const originalCol = column.indexNumber\n              const originalRow = editingState.current.getOriginalRowIndex(\n                getOriginalIndex(rowIndex)\n              )\n              const currentValue = column.getCellValue(\n                getCellContent([colIndex, rowIndex])\n              )\n              const newValue = column.getCellValue(newCell)\n              // Edit the cell only if the value actually changed:\n              if (newValue !== currentValue) {\n                editingState.current.setCell(originalCol, originalRow, {\n                  ...newCell,\n                  lastUpdated: performance.now(),\n                })\n\n                updatedCells.push({\n                  cell: [colIndex, rowIndex],\n                })\n              }\n            }\n          }\n        }\n\n        if (updatedCells.length > 0) {\n          applyEdits()\n          refreshCells(updatedCells)\n        }\n      }\n\n      return false\n    },\n    [\n      columns,\n      editingState,\n      fixedNumRows,\n      getOriginalIndex,\n      getCellContent,\n      onRowAppended,\n      applyEdits,\n      refreshCells,\n    ]\n  )\n\n  return {\n    onCellEdited,\n    onPaste,\n    onRowAppended,\n    onDelete,\n  }\n}\n\nexport default useDataEditor\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { useState } from \"react\"\n\nimport { GridColumn, DataEditorProps } from \"@glideapps/glide-data-grid\"\n\ntype ColumnSizerReturn = Pick<DataEditorProps, \"columns\" | \"onColumnResize\">\n\n/**\n * Hook to manage the interactive column resizing capabilities.\n *\n * @param columns - The columns of the table.\n *\n * @returns An object containing the following properties:\n * - columns: The updated list of columns.\n * - onColumnResize: The callback function to be called when a column is resized.\n */\nfunction useColumnSizer(columns: GridColumn[]): ColumnSizerReturn {\n  // The columns with the corresponding empty template for every type:\n  const [columnSizes, setColumnSizes] = useState<Map<string, number>>(\n    () => new Map()\n  )\n\n  const onColumnResize = React.useCallback(\n    (\n      column: GridColumn,\n      _newSize: number,\n      _colIndex: number,\n      newSizeWithGrow: number\n    ) => {\n      if (column.id) {\n        setColumnSizes(new Map(columnSizes).set(column.id, newSizeWithGrow))\n      }\n    },\n    [columnSizes]\n  )\n\n  // Apply column widths from state:\n  const sizedColumns = columns.map(column => {\n    if (\n      column.id &&\n      columnSizes.has(column.id) &&\n      columnSizes.get(column.id) !== undefined\n    ) {\n      return {\n        ...column,\n        width: columnSizes.get(column.id),\n        // Deactivate grow whenever a column gets manually resized\n        grow: 0,\n      } as GridColumn\n    }\n    return column\n  })\n\n  return {\n    columns: sizedColumns,\n    onColumnResize,\n  }\n}\n\nexport default useColumnSizer\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\"\n\nimport {\n  GridColumn,\n  GridCell,\n  DataEditorProps,\n} from \"@glideapps/glide-data-grid\"\nimport { useColumnSort as useGlideColumnSort } from \"@glideapps/glide-data-grid-source\"\n\nimport {\n  BaseColumn,\n  toGlideColumn,\n} from \"src/components/widgets/DataFrame/columns\"\n\n/**\n * Configuration type for column sorting hook.\n */\ntype ColumnSortConfig = {\n  column: GridColumn\n  mode?: \"default\" | \"raw\" | \"smart\"\n  direction?: \"asc\" | \"desc\"\n}\n\n/**\n * Updates the column headers based on the sorting configuration.\n *\n * @param columns - The columns of the table.\n * @param sort - The current sorting configuration.\n *\n * @returns The updated list of columns.\n */\nfunction updateSortingHeader(\n  columns: BaseColumn[],\n  sort: ColumnSortConfig | undefined\n): BaseColumn[] {\n  if (sort === undefined) {\n    return columns\n  }\n  return columns.map(column => {\n    if (column.id === sort.column.id) {\n      return {\n        ...column,\n        title:\n          sort.direction === \"asc\" ? `↑ ${column.title}` : `↓ ${column.title}`,\n      }\n    }\n    return column\n  })\n}\n\ntype ColumnSortReturn = {\n  columns: BaseColumn[]\n  sortColumn: (index: number) => void\n  getOriginalIndex: (index: number) => number\n} & Pick<DataEditorProps, \"getCellContent\">\n\n/**\n * A React hook that provides column sorting functionality.\n *\n * @param numRows - The number of rows in the table.\n * @param columns - The columns of the table.\n *\n * @returns An object containing the following properties:\n * - `columns`: The updated list of columns.\n * - `sortColumn`: A function that sorts the column at the given index.\n * - `getOriginalIndex`: A function that returns the original index of the row at the given index.\n * - `getCellContent`: An updated function that returns the content of the cell at the given column and row indices.\n */\nfunction useColumnSort(\n  numRows: number,\n  columns: BaseColumn[],\n  getCellContent: ([col, row]: readonly [number, number]) => GridCell\n): ColumnSortReturn {\n  const [sort, setSort] = React.useState<ColumnSortConfig>()\n\n  const { getCellContent: getCellContentSorted, getOriginalIndex } =\n    useGlideColumnSort({\n      columns: columns.map(column => toGlideColumn(column)),\n      getCellContent,\n      rows: numRows,\n      sort,\n    })\n\n  const updatedColumns = updateSortingHeader(columns, sort)\n\n  const sortColumn = React.useCallback(\n    (index: number) => {\n      let sortDirection = \"asc\"\n      const clickedColumn = updatedColumns[index]\n\n      if (sort && sort.column.id === clickedColumn.id) {\n        // The clicked column is already sorted\n        if (sort.direction === \"asc\") {\n          // Sort column descending\n          sortDirection = \"desc\"\n        } else {\n          // Remove sorting of column\n          setSort(undefined)\n          return\n        }\n      }\n\n      setSort({\n        column: toGlideColumn(clickedColumn),\n        direction: sortDirection,\n        mode: clickedColumn.sortMode,\n      } as ColumnSortConfig)\n    },\n    [sort, updatedColumns]\n  )\n\n  return {\n    columns: updatedColumns,\n    sortColumn,\n    getOriginalIndex,\n    getCellContent: getCellContentSorted,\n  }\n}\n\nexport default useColumnSort\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { merge } from \"lodash\"\n\nimport { Quiver } from \"src/lib/Quiver\"\nimport { Arrow as ArrowProto } from \"src/autogen/proto\"\nimport { notNullOrUndefined, isNullOrUndefined } from \"src/lib/utils\"\nimport { logWarning, logError } from \"src/lib/log\"\n\nimport {\n  getColumnTypeFromArrow,\n  getAllColumnsFromArrow,\n  getEmptyIndexColumn,\n} from \"src/components/widgets/DataFrame/arrowUtils\"\nimport {\n  BaseColumn,\n  BaseColumnProps,\n  ObjectColumn,\n  ColumnTypes,\n  ColumnCreator,\n} from \"src/components/widgets/DataFrame/columns\"\n\n// Using this ID for column config will apply the config to all index columns\nexport const INDEX_IDENTIFIER = \"index\"\n// Prefix used in the config column mapping when referring to a column via the numeric position\nexport const COLUMN_POSITION_PREFIX = \"col:\"\n\n/**\n * Options to configure columns.\n */\nexport interface ColumnConfigProps {\n  width?: number\n  title?: string\n  type?: string\n  hidden?: boolean\n  editable?: boolean\n  metadata?: Record<string, unknown>\n  alignment?: string\n}\n\n/**\n * Apply the user-defined column configuration if supplied.\n *\n * @param columnProps - The column properties to apply the config to.\n * @param columnConfigMapping - The user-defined column configuration mapping.\n *\n * @return the column properties with the config applied.\n */\nexport function applyColumnConfig(\n  columnProps: BaseColumnProps,\n  columnConfigMapping: Map<string | number, ColumnConfigProps>\n): BaseColumnProps {\n  if (!columnConfigMapping) {\n    // No column config configured\n    return columnProps\n  }\n\n  let columnConfig\n  if (columnConfigMapping.has(columnProps.title)) {\n    // Config is configured based on the column title\n    columnConfig = columnConfigMapping.get(columnProps.title)\n  } else if (\n    columnConfigMapping.has(\n      `${COLUMN_POSITION_PREFIX}${columnProps.indexNumber}`\n    )\n  ) {\n    // Config is configured based on the column position, e.g. col:0 -> first column\n    columnConfig = columnConfigMapping.get(\n      `${COLUMN_POSITION_PREFIX}${columnProps.indexNumber}`\n    )\n  } else if (\n    columnProps.isIndex &&\n    columnConfigMapping.has(INDEX_IDENTIFIER)\n  ) {\n    // Config is configured for the index column (or all index columns for multi-index)\n    columnConfig = columnConfigMapping.get(INDEX_IDENTIFIER)\n  }\n\n  if (!columnConfig) {\n    // No column config found for this column\n    return columnProps\n  }\n\n  // This will update all column props with the user-defined config for all\n  // configuration option that are not undefined:\n  return merge(\n    { ...columnProps },\n    {\n      title: columnConfig.title,\n      width: columnConfig.width,\n      customType: columnConfig.type?.toLowerCase().trim(),\n      isEditable: columnConfig.editable,\n      isHidden: columnConfig.hidden,\n      columnTypeMetadata: columnConfig.metadata,\n      contentAlignment: columnConfig.alignment,\n    }\n  ) as BaseColumnProps\n}\n\n/**\n * Extracts the user-defined column configuration from the proto message.\n *\n * @param element - The proto message of the dataframe element.\n *\n * @returns the user-defined column configuration.\n */\nexport function getColumnConfig(element: ArrowProto): Map<string, any> {\n  if (!element.columns) {\n    return new Map()\n  }\n  try {\n    return new Map(Object.entries(JSON.parse(element.columns)))\n  } catch (error) {\n    // This is not expected to happen, but if it does, we'll return an empty map\n    // and log the error to the console.\n    logError(error)\n    return new Map()\n  }\n}\n\ntype ColumnLoaderReturn = {\n  columns: BaseColumn[]\n}\n\n/**\n * Get the column type (creator class of column type) for the given column properties.\n *\n * @param column - The column properties.\n *\n * @returns the column creator of the corresponding column type.\n */\nexport function getColumnType(column: BaseColumnProps): ColumnCreator {\n  // Create a column instance based on the column properties\n  let ColumnType: ColumnCreator | undefined\n  if (notNullOrUndefined(column.customType)) {\n    if (ColumnTypes.has(column.customType)) {\n      ColumnType = ColumnTypes.get(column.customType)\n    } else {\n      logWarning(\n        `Unknown column type configured in column configuration: ${column.customType}`\n      )\n    }\n  }\n  if (isNullOrUndefined(ColumnType)) {\n    // Load based on arrow type\n    ColumnType = getColumnTypeFromArrow(column.arrowType)\n  }\n  return ColumnType\n}\n\n/**\n * Custom hook that handles loads and configures all table columns from the Arrow table.\n *\n * @param element - The proto message of the dataframe element\n * @param data - The Arrow data extracted from the proto message\n * @param disabled - Whether the widget is disabled\n *\n * @returns the columns and the cell content getter compatible with glide-data-grid.\n */\nfunction useColumnLoader(\n  element: ArrowProto,\n  data: Quiver,\n  disabled: boolean\n): ColumnLoaderReturn {\n  // TODO(lukasmasuch): We might use state to store the column config as additional optimization?\n  const columnConfigMapping = getColumnConfig(element)\n\n  const stretchColumns: boolean =\n    element.useContainerWidth ||\n    (notNullOrUndefined(element.width) && element.width > 0)\n\n  // Converts the columns from Arrow into columns compatible with glide-data-grid\n  const configuredColumns: BaseColumn[] = getAllColumnsFromArrow(data)\n    .map(column => {\n      // Apply column configurations\n      let updatedColumn = {\n        ...column,\n        ...applyColumnConfig(column, columnConfigMapping),\n        isStretched: stretchColumns,\n      } as BaseColumnProps\n\n      const ColumnType = getColumnType(updatedColumn)\n\n      // Make sure editing is deactivated if the column is read-only, disabled,\n      // or a not editable type.\n      if (\n        element.editingMode === ArrowProto.EditingMode.READ_ONLY ||\n        disabled ||\n        ColumnType.isEditableType === false\n      ) {\n        updatedColumn = {\n          ...updatedColumn,\n          isEditable: false,\n        }\n      }\n\n      return ColumnType(updatedColumn)\n    })\n    .filter(column => {\n      // Filter out all columns that are hidden\n      return !column.isHidden\n    })\n\n  // If all columns got filtered out, we add an empty index column\n  // to prevent errors from glide-data-grid.\n  const columns =\n    configuredColumns.length > 0\n      ? configuredColumns\n      : [ObjectColumn(getEmptyIndexColumn())]\n\n  return {\n    columns,\n  }\n}\n\nexport default useColumnLoader\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport styled from \"@emotion/styled\"\n\n/**\n * A resizable data grid container component.\n */\nexport const StyledResizableContainer = styled.div(({ theme }) => ({\n  position: \"relative\",\n  display: \"inline-block\",\n\n  \"& .glideDataEditor\": {\n    height: \"100%\",\n    minWidth: \"100%\",\n    borderRadius: theme.radii.md,\n  },\n\n  \"& .dvn-scroller\": {\n    scrollbarWidth: \"thin\",\n    [\"overflowX\" as any]: \"overlay !important\",\n    [\"overflowY\" as any]: \"overlay !important\",\n  },\n}))\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { ReactElement } from \"react\"\nimport {\n  DataEditor as GlideDataEditor,\n  DataEditorRef,\n  GridSelection,\n  CompactSelection,\n  GridMouseEventArgs,\n  drawTextCell,\n  DrawCustomCellCallback,\n  GridCell,\n} from \"@glideapps/glide-data-grid\"\nimport { useExtraCells } from \"@glideapps/glide-data-grid-cells\"\nimport { Resizable } from \"re-resizable\"\n\nimport { FormClearHelper } from \"src/components/widgets/Form\"\nimport withFullScreenWrapper from \"src/hocs/withFullScreenWrapper\"\nimport { Quiver } from \"src/lib/Quiver\"\nimport { Arrow as ArrowProto } from \"src/autogen/proto\"\nimport { WidgetInfo, WidgetStateManager } from \"src/lib/WidgetStateManager\"\nimport { debounce, isNullOrUndefined } from \"src/lib/utils\"\n\nimport EditingState from \"./EditingState\"\nimport {\n  useCustomTheme,\n  useTableSizer,\n  useDataLoader,\n  useDataEditor,\n  useColumnSizer,\n  useColumnSort,\n  useColumnLoader,\n} from \"./hooks\"\nimport {\n  BaseColumn,\n  toGlideColumn,\n  isMissingValueCell,\n  getTextCell,\n} from \"./columns\"\nimport { StyledResizableContainer } from \"./styled-components\"\n\nimport \"@glideapps/glide-data-grid/dist/index.css\"\n\n// Min column width used for manual and automatic resizing\nconst MIN_COLUMN_WIDTH = 50\n// Max column width used for manual resizing\nconst MAX_COLUMN_WIDTH = 1000\n// Max column width used for automatic column sizing\nconst MAX_COLUMN_AUTO_WIDTH = 500\n// Debounce time for triggering a widget state update\n// This prevents to rapid updates to the widget state.\nconst DEBOUNCE_TIME_MS = 100\n// Token used for missing values (null, NaN, etc.)\nconst NULL_VALUE_TOKEN = \"None\"\n// Number of rows that triggers some optimization features\n// for large tables.\nconst LARGE_TABLE_ROWS_THRESHOLD = 150000\n\nexport interface DataFrameProps {\n  element: ArrowProto\n  data: Quiver\n  width: number\n  height?: number\n  disabled: boolean\n  widgetMgr: WidgetStateManager\n  isFullScreen?: boolean\n}\n\n/**\n * If a cell is marked as missing, we draw a placeholder symbol with a faded text color.\n * This is done by providing a custom cell renderer.\n */\nconst drawMissingCells: DrawCustomCellCallback = args => {\n  const { cell, theme } = args\n  if (isMissingValueCell(cell)) {\n    drawTextCell(\n      {\n        ...args,\n        theme: {\n          ...theme,\n          textDark: theme.textLight,\n          textMedium: theme.textLight,\n        },\n        // The following props are just added for technical reasons:\n        // @ts-expect-error\n        spriteManager: {},\n        hyperWrapping: false,\n      },\n      NULL_VALUE_TOKEN,\n      cell.contentAlign\n    )\n    return true\n  }\n\n  return false\n}\n\n/**\n * The main component used by dataframe & data_editor to render an editable table.\n *\n * @param element - The element's proto message\n * @param data - The Arrow data to render (extracted from the proto message)\n * @param width - The width of the container\n * @param height - The height of the container\n * @param disabled - Whether the widget is disabled\n * @param widgetMgr - The widget manager\n * @param isFullScreen - Whether the widget is in full screen mode\n */\nfunction DataFrame({\n  element,\n  data,\n  width: containerWidth,\n  height: containerHeight,\n  disabled,\n  widgetMgr,\n  isFullScreen,\n}: DataFrameProps): ReactElement {\n  const resizableRef = React.useRef<Resizable>(null)\n  const dataEditorRef = React.useRef<DataEditorRef>(null)\n\n  const extraCellArgs = useExtraCells()\n  const theme = useCustomTheme()\n\n  const [isFocused, setIsFocused] = React.useState<boolean>(true)\n\n  const [gridSelection, setGridSelection] = React.useState<GridSelection>({\n    columns: CompactSelection.empty(),\n    rows: CompactSelection.empty(),\n    current: undefined,\n  })\n\n  // This callback is used to clear all selections (row/column/cell)\n  const clearSelection = React.useCallback(() => {\n    setGridSelection({\n      columns: CompactSelection.empty(),\n      rows: CompactSelection.empty(),\n      current: undefined,\n    })\n  }, [])\n\n  // This callback is used to refresh the rendering of selected cells\n  const refreshCells = React.useCallback(\n    (\n      cells: {\n        cell: [number, number]\n      }[]\n    ) => {\n      dataEditorRef.current?.updateCells(cells)\n    },\n    []\n  )\n\n  // This is done to keep some backwards compatibility\n  // so that old arrow proto messages from the st.dataframe\n  // would still work. Those messages don't have the\n  // editingMode field defined.\n  if (isNullOrUndefined(element.editingMode)) {\n    element.editingMode = ArrowProto.EditingMode.READ_ONLY\n  }\n\n  const { READ_ONLY, DYNAMIC } = ArrowProto.EditingMode\n\n  // Number of rows of the table minus 1 for the header row:\n  const dataDimensions = data.dimensions\n  const originalNumRows = Math.max(0, dataDimensions.rows - 1)\n\n  // For empty tables, we show an extra row that\n  // contains \"empty\" as a way to indicate that the table is empty.\n  const isEmptyTable =\n    originalNumRows === 0 &&\n    // We don't show empty state for dynamic mode with a table that has\n    // data columns defined.\n    !(element.editingMode === DYNAMIC && dataDimensions.dataColumns > 0)\n\n  // For large tables, we apply some optimizations to handle large data\n  const isLargeTable = originalNumRows > LARGE_TABLE_ROWS_THRESHOLD\n\n  const editingState = React.useRef<EditingState>(\n    new EditingState(originalNumRows)\n  )\n\n  const [numRows, setNumRows] = React.useState(\n    editingState.current.getNumRows()\n  )\n\n  React.useEffect(() => {\n    editingState.current = new EditingState(originalNumRows)\n    setNumRows(editingState.current.getNumRows())\n  }, [originalNumRows])\n\n  const resetEditingState = React.useCallback(() => {\n    editingState.current = new EditingState(originalNumRows)\n    setNumRows(editingState.current.getNumRows())\n  }, [originalNumRows])\n\n  const { columns: originalColumns } = useColumnLoader(element, data, disabled)\n\n  // On the first rendering, try to load initial widget state if\n  // it exist. This is required in the case that other elements\n  // are inserted before this widget.\n  React.useEffect(() => {\n    if (element.editingMode !== READ_ONLY) {\n      const initialWidgetValue = widgetMgr.getStringValue(element)\n      if (initialWidgetValue) {\n        editingState.current.fromJson(initialWidgetValue, originalColumns)\n        setNumRows(editingState.current.getNumRows())\n      }\n    }\n  }, [])\n\n  const { getCellContent: getOriginalCellContent } = useDataLoader(\n    data,\n    originalColumns,\n    numRows,\n    editingState\n  )\n\n  const { columns, sortColumn, getOriginalIndex, getCellContent } =\n    useColumnSort(originalNumRows, originalColumns, getOriginalCellContent)\n\n  /**\n   * This callback should be called after any edits have been applied to the data.\n   * It will finish up the editing by updating the number of rows, clearing the selection,\n   * and triggering a rerun of the script.\n   *\n   * @param clearSelections - Whether to clear the selection. This is usually done after deleting rows.\n   * @param triggerRerun - Whether to trigger a rerun of the script after applying edits\n   */\n  const applyEdits = React.useCallback(\n    (clearSelections = false, triggerRerun = true) => {\n      if (numRows !== editingState.current.getNumRows()) {\n        // Reset the number of rows if it has been changed in the editing state\n        setNumRows(editingState.current.getNumRows())\n      }\n\n      if (clearSelections) {\n        clearSelection()\n      }\n\n      // Use debounce to prevent rapid updates to the widget state.\n      debounce(DEBOUNCE_TIME_MS, () => {\n        const currentEditingState = editingState.current.toJson(columns)\n        let currentWidgetState = widgetMgr.getStringValue(\n          element as WidgetInfo\n        )\n\n        if (currentWidgetState === undefined) {\n          // Create an empty widget state\n          currentWidgetState = new EditingState(0).toJson([])\n        }\n\n        // Only update if there is actually a difference between editing and widget state\n        if (currentEditingState !== currentWidgetState) {\n          widgetMgr.setStringValue(\n            element as WidgetInfo,\n            currentEditingState,\n            {\n              fromUi: triggerRerun,\n            }\n          )\n        }\n      })()\n    },\n    [widgetMgr, element, numRows]\n  )\n\n  const { onCellEdited, onPaste, onRowAppended, onDelete } = useDataEditor(\n    columns,\n    element.editingMode !== DYNAMIC,\n    editingState,\n    getCellContent,\n    getOriginalIndex,\n    refreshCells,\n    applyEdits\n  )\n\n  const { columns: glideColumns, onColumnResize } = useColumnSizer(\n    columns.map(column => toGlideColumn(column))\n  )\n\n  const {\n    rowHeight,\n    minHeight,\n    maxHeight,\n    minWidth,\n    maxWidth,\n    resizableSize,\n    setResizableSize,\n  } = useTableSizer(\n    element,\n    numRows,\n    containerWidth,\n    containerHeight,\n    isFullScreen\n  )\n\n  // This is used as fallback in case the table is empty to\n  // insert cells indicating this state:\n  const getEmptyStateContent = React.useCallback(\n    ([_col, _row]: readonly [number, number]): GridCell => {\n      return {\n        ...getTextCell(true, false),\n        displayData: \"empty\",\n        contentAlign: \"center\",\n        allowOverlay: false,\n        themeOverride: {\n          textDark: theme.textLight,\n        },\n        span: [0, Math.max(columns.length - 1, 0)],\n      } as GridCell\n    },\n    [columns]\n  )\n\n  // This is required for the form clearing functionality:\n  React.useEffect(() => {\n    const formClearHelper = new FormClearHelper()\n    formClearHelper.manageFormClearListener(\n      widgetMgr,\n      element.formId,\n      resetEditingState\n    )\n\n    return () => {\n      formClearHelper.disconnect()\n    }\n  }, [])\n\n  return (\n    <StyledResizableContainer\n      className=\"stDataFrame\"\n      onBlur={() => {\n        // If the container loses focus, clear the current selection\n        if (!isFocused) {\n          clearSelection()\n        }\n      }}\n    >\n      <Resizable\n        data-testid=\"stDataFrameResizable\"\n        ref={resizableRef}\n        defaultSize={resizableSize}\n        style={{\n          border: `1px solid ${theme.borderColor}`,\n          borderRadius: `${theme.tableBorderRadius}`,\n        }}\n        minHeight={minHeight}\n        maxHeight={maxHeight}\n        minWidth={minWidth}\n        maxWidth={maxWidth}\n        size={resizableSize}\n        enable={{\n          top: false,\n          right: false,\n          bottom: false,\n          left: false,\n          topRight: false,\n          bottomRight: true,\n          bottomLeft: false,\n          topLeft: false,\n        }}\n        grid={[1, rowHeight]}\n        snapGap={rowHeight / 3}\n        onResizeStop={(_event, _direction, _ref, _delta) => {\n          if (resizableRef.current) {\n            setResizableSize({\n              width: resizableRef.current.size.width,\n              height:\n                // Add an additional pixel if it is stretched to full width\n                // to allow the full cell border to be visible\n                maxHeight - resizableRef.current.size.height === 3\n                  ? resizableRef.current.size.height + 3\n                  : resizableRef.current.size.height,\n            })\n          }\n        }}\n      >\n        <GlideDataEditor\n          className=\"glideDataEditor\"\n          ref={dataEditorRef}\n          columns={glideColumns}\n          rows={isEmptyTable ? 1 : numRows}\n          minColumnWidth={MIN_COLUMN_WIDTH}\n          maxColumnWidth={MAX_COLUMN_WIDTH}\n          maxColumnAutoWidth={MAX_COLUMN_AUTO_WIDTH}\n          rowHeight={rowHeight}\n          headerHeight={rowHeight}\n          getCellContent={isEmptyTable ? getEmptyStateContent : getCellContent}\n          onColumnResize={onColumnResize}\n          // Freeze all index columns:\n          freezeColumns={\n            isEmptyTable\n              ? 0\n              : columns.filter((col: BaseColumn) => col.isIndex).length\n          }\n          smoothScrollX={true}\n          smoothScrollY={true}\n          // Show borders between cells:\n          verticalBorder={(col: number) =>\n            // Show no border for last column in certain situations\n            // This is required to prevent the cell selection border to not be cut off\n            !(\n              col >= columns.length &&\n              (element.useContainerWidth || resizableSize.width === \"100%\")\n            )\n          }\n          // Activate copy to clipboard functionality:\n          getCellsForSelection={true}\n          // Deactivate row markers and numbers:\n          rowMarkers={\"none\"}\n          // Deactivate selections:\n          rangeSelect={\"rect\"}\n          columnSelect={\"none\"}\n          rowSelect={\"none\"}\n          // Activate search:\n          keybindings={{ search: true, downFill: true }}\n          // Header click is used for column sorting:\n          onHeaderClicked={\n            // Deactivate sorting for empty state and for large dataframes:\n            isEmptyTable || isLargeTable ? undefined : sortColumn\n          }\n          gridSelection={gridSelection}\n          onGridSelectionChange={setGridSelection}\n          // Apply different styling to missing cells:\n          drawCell={drawMissingCells}\n          theme={theme}\n          onMouseMove={(args: GridMouseEventArgs) => {\n            // Determine if the dataframe is focused or not\n            if (args.kind === \"out-of-bounds\" && isFocused) {\n              setIsFocused(false)\n            } else if (args.kind !== \"out-of-bounds\" && !isFocused) {\n              setIsFocused(true)\n            }\n          }}\n          // Add shadow for index columns and header on scroll:\n          fixedShadowX={true}\n          fixedShadowY={true}\n          experimental={{\n            // We use an overlay scrollbar, so no need to have space for reserved for the scrollbar:\n            scrollbarWidthOverride: 1,\n          }}\n          // Add support for additional cells:\n          customRenderers={extraCellArgs.customRenderers}\n          // The default setup is read only, and therefore we deactivate paste here:\n          onPaste={false}\n          // If element is editable, enable editing features:\n          {...(!isEmptyTable &&\n            element.editingMode !== READ_ONLY &&\n            !disabled && {\n              // Support fill handle for bulk editing:\n              fillHandle: true,\n              // Support editing:\n              onCellEdited,\n              // Support pasting data for bulk editing:\n              onPaste,\n              // Support deleting cells & rows:\n              onDelete,\n            })}\n          // If element is dynamic, enable adding & deleting rows:\n          {...(!isEmptyTable &&\n            element.editingMode === DYNAMIC && {\n              // Support adding rows:\n              trailingRowOptions: {\n                sticky: false,\n                tint: true,\n              },\n              rowMarkerTheme: {\n                bgCell: theme.bgHeader,\n                bgCellMedium: theme.bgHeader,\n              },\n              rowMarkers: \"checkbox\",\n              rowSelectionMode: \"auto\",\n              rowSelect: disabled ? \"none\" : \"multi\",\n              // Support adding rows:\n              onRowAppended: disabled ? undefined : onRowAppended,\n              // Deactivate sorting, since it is not supported with dynamic editing:\n              onHeaderClicked: undefined,\n            })}\n        />\n      </Resizable>\n    </StyledResizableContainer>\n  )\n}\n\nexport default withFullScreenWrapper(DataFrame)\n"],"names":["numRows","editedCells","Map","addedRows","deletedRows","this","columns","columnsByIndex","forEach","column","set","indexNumber","currentState","edited_cells","added_rows","deleted_rows","row","rowIndex","_map","cell","colIndex","get","getCellValue","addedRow","cellValue","notNullOrUndefined","push","JSON","stringify","k","v","undefined","editingStateJson","editingState","parse","Object","keys","key","split","map","Number","getCell","has","col","isAddedRow","rowCache","length","rowCells","rows","sort","a","b","deleteRow","isNullOrUndefined","splice","includes","delete","originalIndex","i","theme","useTheme","accentColor","colors","primary","accentFg","white","accentLight","transparentize","borderColor","fadedText05","horizontalBorderColor","fontFamily","genericFonts","bodyFont","bgSearchResult","bgIconHeader","fadedText60","fgIconHeader","bgHeader","bgMix","bgHeaderHasFocus","secondaryBg","bgHeaderHovered","textHeader","textHeaderSelected","textGroupHeader","headerFontStyle","fontSizes","sm","baseFontStyle","editorFontSize","textDark","bodyText","textMedium","textLight","fadedText40","textBubble","bgCell","bgColor","bgCellMedium","cellHorizontalPadding","cellVerticalPadding","bgBubble","bgBubbleSelected","linkColor","linkText","drilldownBorder","darkenedBgMix25","tableBorderRadius","radii","md","BOOLEAN_TRUE_VALUES","BOOLEAN_FALSE_VALUES","getErrorCell","errorMsg","errorDetails","kind","GridCellKind","readonly","allowOverlay","data","displayData","isError","isErrorCell","hasOwnProperty","toGlideColumn","id","title","hasMenu","themeOverride","isStretched","grow","isIndex","width","mergeColumnParameters","defaultParams","userParams","merge","toSafeArray","trim","startsWith","endsWith","error","parsedData","_key","value","isArray","toSafeString","toString","toSafeBoolean","cleanedValue","toLowerCase","toSafeNumber","NaN","unformattedValue","numbro","Int32Array","formatNumber","maxPrecision","keepTrailingZeros","isNaN","isFinite","Math","round","format","repeat","ObjectColumn","props","cellTemplate","contentAlignment","style","sortMode","isEditable","cellData","isMissingValue","isEditableType","TextColumn","BooleanColumn","contentAlign","CategoricalColumn","dataType","parameters","options","Quiver","arrowType","columnTypeMetadata","uniqueTypes","Set","x","size","copyData","allowedValues","filter","opt","ListColumn","NumberColumn","arrowTypeName","precision","min","allowNegative","fixedDecimals","trunc","max","ColumnTypes","entries","object","text","boolean","categorical","list","number","extractCssProperty","htmlElementId","property","cssStyle","regex","RegExp","replace","match","exec","processDisplayData","getIndexFromArrow","indexPosition","types","index","indexNames","isHidden","getColumnFromArrow","columnPosition","meta","numpy_type","pandas_type","getCategoricalOptions","getCellFromArrow","arrowCell","cssStyles","content","contentType","field","displayContent","cssId","fontColor","backgroundColor","applyPandasStylerCss","getCellContent","React","originalCol","originalRow","current","getOriginalRowIndex","editedCell","logError","ROW_HEIGHT","MIN_TABLE_WIDTH","MIN_TABLE_HEIGHT","DEFAULT_TABLE_HEIGHT","element","containerWidth","containerHeight","isFullScreen","initialWidth","maxHeight","calculateMaxHeight","editingMode","ArrowProto","initialHeight","height","maxWidth","useContainerWidth","resizableSize","setResizableSize","stretchColumns","rowHeight","minHeight","minWidth","fixedNumRows","getOriginalIndex","refreshCells","applyEdits","onCellEdited","updatedCell","currentCell","currentValue","newValue","newCell","setCell","lastUpdated","performance","now","onRowAppended","newRow","addRow","onDelete","selection","rowsToDelete","toArray","deleteRows","range","updatedCells","selectedArea","y","onPaste","target","values","targetCol","targetRow","rowData","getNumRows","pasteDataValue","useState","columnSizes","setColumnSizes","onColumnResize","_newSize","_colIndex","newSizeWithGrow","setSort","useGlideColumnSort","getCellContentSorted","updatedColumns","direction","updateSortingHeader","sortColumn","sortDirection","clickedColumn","mode","INDEX_IDENTIFIER","COLUMN_POSITION_PREFIX","getColumnType","ColumnType","customType","logWarning","typeName","getColumnTypeFromArrow","disabled","columnConfigMapping","getColumnConfig","configuredColumns","numIndices","numColumns","getAllColumnsFromArrow","updatedColumn","columnProps","columnConfig","type","editable","hidden","metadata","alignment","applyColumnConfig","StyledResizableContainer","position","display","borderRadius","scrollbarWidth","MIN_COLUMN_WIDTH","MAX_COLUMN_WIDTH","MAX_COLUMN_AUTO_WIDTH","DEBOUNCE_TIME_MS","LARGE_TABLE_ROWS_THRESHOLD","drawMissingCells","args","isMissingValueCell","drawTextCell","spriteManager","hyperWrapping","withFullScreenWrapper","widgetMgr","resizableRef","dataEditorRef","extraCellArgs","useExtraCells","useCustomTheme","isFocused","setIsFocused","CompactSelection","gridSelection","setGridSelection","clearSelection","cells","updateCells","READ_ONLY","DYNAMIC","dataDimensions","dimensions","originalNumRows","isEmptyTable","dataColumns","isLargeTable","EditingState","setNumRows","resetEditingState","originalColumns","useColumnLoader","initialWidgetValue","getStringValue","fromJson","getOriginalCellContent","useDataLoader","useColumnSort","clearSelections","triggerRerun","debounce","currentEditingState","toJson","currentWidgetState","setStringValue","fromUi","useDataEditor","useColumnSizer","glideColumns","useTableSizer","getEmptyStateContent","faded","getTextCell","span","formClearHelper","FormClearHelper","manageFormClearListener","formId","disconnect","className","onBlur","ref","defaultSize","border","enable","top","right","bottom","left","topRight","bottomRight","bottomLeft","topLeft","grid","snapGap","onResizeStop","_event","_direction","_ref","_delta","minColumnWidth","maxColumnWidth","maxColumnAutoWidth","headerHeight","freezeColumns","smoothScrollX","smoothScrollY","verticalBorder","getCellsForSelection","rowMarkers","rangeSelect","columnSelect","rowSelect","keybindings","search","downFill","onHeaderClicked","onGridSelectionChange","drawCell","onMouseMove","fixedShadowX","fixedShadowY","experimental","scrollbarWidthOverride","customRenderers","fillHandle","trailingRowOptions","sticky","tint","rowMarkerTheme","rowSelectionMode"],"sourceRoot":""}